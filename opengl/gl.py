'''
OpenGL binding For python
WARNING - This is generated code, do not modify directly.
API: gl
'''
import sys
import ctypes as ct

from opengl.bindutils import gl_func
from opengl import gltypes as t

#### GL VERSION 1.0 ####

def init_gl_version_1_0():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glRasterPos3d = gl_func( 'glRasterPos3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glVertex4d = gl_func( 'glVertex4d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glVertex2i = gl_func( 'glVertex2i', t.void, (t.GLint, t.GLint))
    gl.glColor4ub = gl_func( 'glColor4ub', t.void, (t.GLubyte, t.GLubyte, t.GLubyte, t.GLubyte))
    gl.glVertex3s = gl_func( 'glVertex3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glTexCoord3f = gl_func( 'glTexCoord3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glNormal3sv = gl_func( 'glNormal3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glColor3usv = gl_func( 'glColor3usv', t.void, (ct.POINTER(t.GLushort),))
    gl.glFogf = gl_func( 'glFogf', t.void, (t.GLenum, t.GLfloat))
    gl.glMaterialfv = gl_func( 'glMaterialfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glColor3sv = gl_func( 'glColor3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glIndexfv = gl_func( 'glIndexfv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glFrustum = gl_func( 'glFrustum', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glVertex2iv = gl_func( 'glVertex2iv', t.void, (ct.POINTER(t.GLint),))
    gl.glInitNames = gl_func( 'glInitNames', t.void, ())
    gl.glIndexMask = gl_func( 'glIndexMask', t.void, (t.GLuint,))
    gl.glIndexsv = gl_func( 'glIndexsv', t.void, (ct.POINTER(t.GLshort),))
    gl.glOrtho = gl_func( 'glOrtho', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glMapGrid1f = gl_func( 'glMapGrid1f', t.void, (t.GLint, t.GLfloat, t.GLfloat))
    gl.glLineWidth = gl_func( 'glLineWidth', t.void, (t.GLfloat,))
    gl.glColor4ui = gl_func( 'glColor4ui', t.void, (t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glScalef = gl_func( 'glScalef', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glBitmap = gl_func( 'glBitmap', t.void, (t.GLsizei, t.GLsizei, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat, ct.POINTER(t.GLubyte)))
    gl.glTexGeniv = gl_func( 'glTexGeniv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glHint = gl_func( 'glHint', t.void, (t.GLenum, t.GLenum))
    gl.glVertex2sv = gl_func( 'glVertex2sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glColor3us = gl_func( 'glColor3us', t.void, (t.GLushort, t.GLushort, t.GLushort))
    gl.glLightiv = gl_func( 'glLightiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glLighti = gl_func( 'glLighti', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glIndexd = gl_func( 'glIndexd', t.void, (t.GLdouble,))
    gl.glPopAttrib = gl_func( 'glPopAttrib', t.void, ())
    gl.glTexCoord3d = gl_func( 'glTexCoord3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glGetMapiv = gl_func( 'glGetMapiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glRasterPos4fv = gl_func( 'glRasterPos4fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glTexCoord2fv = gl_func( 'glTexCoord2fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glAlphaFunc = gl_func( 'glAlphaFunc', t.void, (t.GLenum, t.GLfloat))
    gl.glLoadMatrixd = gl_func( 'glLoadMatrixd', t.void, (ct.POINTER(t.GLdouble),))
    gl.glEndList = gl_func( 'glEndList', t.void, ())
    gl.glColor3f = gl_func( 'glColor3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glRasterPos2i = gl_func( 'glRasterPos2i', t.void, (t.GLint, t.GLint))
    gl.glVertex4i = gl_func( 'glVertex4i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glLightf = gl_func( 'glLightf', t.void, (t.GLenum, t.GLenum, t.GLfloat))
    gl.glNormal3i = gl_func( 'glNormal3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glEvalCoord2fv = gl_func( 'glEvalCoord2fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glShadeModel = gl_func( 'glShadeModel', t.void, (t.GLenum,))
    gl.glPopName = gl_func( 'glPopName', t.void, ())
    gl.glColor4uiv = gl_func( 'glColor4uiv', t.void, (ct.POINTER(t.GLuint),))
    gl.glVertex3dv = gl_func( 'glVertex3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glColor4sv = gl_func( 'glColor4sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glVertex3f = gl_func( 'glVertex3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glTexEnvi = gl_func( 'glTexEnvi', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glPixelTransferi = gl_func( 'glPixelTransferi', t.void, (t.GLenum, t.GLint))
    gl.glPixelZoom = gl_func( 'glPixelZoom', t.void, (t.GLfloat, t.GLfloat))
    gl.glFogi = gl_func( 'glFogi', t.void, (t.GLenum, t.GLint))
    gl.glLightModelf = gl_func( 'glLightModelf', t.void, (t.GLenum, t.GLfloat))
    gl.glIsEnabled = gl_func( 'glIsEnabled', t.GLboolean, (t.GLenum,))
    gl.glDepthRange = gl_func( 'glDepthRange', t.void, (t.GLdouble, t.GLdouble))
    gl.glPointSize = gl_func( 'glPointSize', t.void, (t.GLfloat,))
    gl.glGetMaterialiv = gl_func( 'glGetMaterialiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glRects = gl_func( 'glRects', t.void, (t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glTranslated = gl_func( 'glTranslated', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glTexGenfv = gl_func( 'glTexGenfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glColor3b = gl_func( 'glColor3b', t.void, (t.GLbyte, t.GLbyte, t.GLbyte))
    gl.glVertex2fv = gl_func( 'glVertex2fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glLoadName = gl_func( 'glLoadName', t.void, (t.GLuint,))
    gl.glClearStencil = gl_func( 'glClearStencil', t.void, (t.GLint,))
    gl.glFrontFace = gl_func( 'glFrontFace', t.void, (t.GLenum,))
    gl.glClearAccum = gl_func( 'glClearAccum', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glTexEnviv = gl_func( 'glTexEnviv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glColor4bv = gl_func( 'glColor4bv', t.void, (ct.POINTER(t.GLbyte),))
    gl.glTexCoord1sv = gl_func( 'glTexCoord1sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glMap1d = gl_func( 'glMap1d', t.void, (t.GLenum, t.GLdouble, t.GLdouble, t.GLint, t.GLint, ct.POINTER(t.GLdouble)))
    gl.glRasterPos3f = gl_func( 'glRasterPos3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glTexCoord1dv = gl_func( 'glTexCoord1dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glEvalCoord1d = gl_func( 'glEvalCoord1d', t.void, (t.GLdouble,))
    gl.glTexParameterf = gl_func( 'glTexParameterf', t.void, (t.GLenum, t.GLenum, t.GLfloat))
    gl.glTexCoord3dv = gl_func( 'glTexCoord3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glGetClipPlane = gl_func( 'glGetClipPlane', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glColor3bv = gl_func( 'glColor3bv', t.void, (ct.POINTER(t.GLbyte),))
    gl.glTexCoord2d = gl_func( 'glTexCoord2d', t.void, (t.GLdouble, t.GLdouble))
    gl.glRasterPos2s = gl_func( 'glRasterPos2s', t.void, (t.GLshort, t.GLshort))
    gl.glRecti = gl_func( 'glRecti', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glRasterPos2d = gl_func( 'glRasterPos2d', t.void, (t.GLdouble, t.GLdouble))
    gl.glTexParameteri = gl_func( 'glTexParameteri', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glMaterialiv = gl_func( 'glMaterialiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glCallLists = gl_func( 'glCallLists', t.void, (t.GLsizei, t.GLenum, ct.POINTER(t.void)))
    gl.glRasterPos4iv = gl_func( 'glRasterPos4iv', t.void, (ct.POINTER(t.GLint),))
    gl.glGetMapfv = gl_func( 'glGetMapfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glSelectBuffer = gl_func( 'glSelectBuffer', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glRotatef = gl_func( 'glRotatef', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glColor3ubv = gl_func( 'glColor3ubv', t.void, (ct.POINTER(t.GLubyte),))
    gl.glColor3i = gl_func( 'glColor3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glColor4ubv = gl_func( 'glColor4ubv', t.void, (ct.POINTER(t.GLubyte),))
    gl.glMapGrid2f = gl_func( 'glMapGrid2f', t.void, (t.GLint, t.GLfloat, t.GLfloat, t.GLint, t.GLfloat, t.GLfloat))
    gl.glTexCoord4fv = gl_func( 'glTexCoord4fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glRasterPos4sv = gl_func( 'glRasterPos4sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glGenLists = gl_func( 'glGenLists', t.GLuint, (t.GLsizei,))
    gl.glVertex4f = gl_func( 'glVertex4f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glRectf = gl_func( 'glRectf', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glColor4us = gl_func( 'glColor4us', t.void, (t.GLushort, t.GLushort, t.GLushort, t.GLushort))
    gl.glEvalCoord1fv = gl_func( 'glEvalCoord1fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glVertex3iv = gl_func( 'glVertex3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glGetPixelMapusv = gl_func( 'glGetPixelMapusv', t.void, (t.GLenum, ct.POINTER(t.GLushort)))
    gl.glEdgeFlag = gl_func( 'glEdgeFlag', t.void, (t.GLboolean,))
    gl.glListBase = gl_func( 'glListBase', t.void, (t.GLuint,))
    gl.glFogiv = gl_func( 'glFogiv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glEvalMesh1 = gl_func( 'glEvalMesh1', t.void, (t.GLenum, t.GLint, t.GLint))
    gl.glEvalPoint2 = gl_func( 'glEvalPoint2', t.void, (t.GLint, t.GLint))
    gl.glCallList = gl_func( 'glCallList', t.void, (t.GLuint,))
    gl.glMap2f = gl_func( 'glMap2f', t.void, (t.GLenum, t.GLfloat, t.GLfloat, t.GLint, t.GLint, t.GLfloat, t.GLfloat, t.GLint, t.GLint, ct.POINTER(t.GLfloat)))
    gl.glIndexiv = gl_func( 'glIndexiv', t.void, (ct.POINTER(t.GLint),))
    gl.glPassThrough = gl_func( 'glPassThrough', t.void, (t.GLfloat,))
    gl.glViewport = gl_func( 'glViewport', t.void, (t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glTexCoord1i = gl_func( 'glTexCoord1i', t.void, (t.GLint,))
    gl.glTexParameterfv = gl_func( 'glTexParameterfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glVertex2s = gl_func( 'glVertex2s', t.void, (t.GLshort, t.GLshort))
    gl.glRasterPos2f = gl_func( 'glRasterPos2f', t.void, (t.GLfloat, t.GLfloat))
    gl.glRenderMode = gl_func( 'glRenderMode', t.GLint, (t.GLenum,))
    gl.glRasterPos3dv = gl_func( 'glRasterPos3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glClear = gl_func( 'glClear', t.void, (t.GLbitfield,))
    gl.glColor4d = gl_func( 'glColor4d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glTexCoord3i = gl_func( 'glTexCoord3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glRotated = gl_func( 'glRotated', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glNormal3iv = gl_func( 'glNormal3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glNormal3dv = gl_func( 'glNormal3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glMapGrid2d = gl_func( 'glMapGrid2d', t.void, (t.GLint, t.GLdouble, t.GLdouble, t.GLint, t.GLdouble, t.GLdouble))
    gl.glColor4f = gl_func( 'glColor4f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glTexCoord4d = gl_func( 'glTexCoord4d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glTexCoord2dv = gl_func( 'glTexCoord2dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glMultMatrixd = gl_func( 'glMultMatrixd', t.void, (ct.POINTER(t.GLdouble),))
    gl.glRasterPos3iv = gl_func( 'glRasterPos3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glEvalCoord2f = gl_func( 'glEvalCoord2f', t.void, (t.GLfloat, t.GLfloat))
    gl.glVertex2dv = gl_func( 'glVertex2dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glVertex3i = gl_func( 'glVertex3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glDisable = gl_func( 'glDisable', t.void, (t.GLenum,))
    gl.glPixelMapuiv = gl_func( 'glPixelMapuiv', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glRasterPos4d = gl_func( 'glRasterPos4d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glGetTexLevelParameterfv = gl_func( 'glGetTexLevelParameterfv', t.void, (t.GLenum, t.GLint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glPixelTransferf = gl_func( 'glPixelTransferf', t.void, (t.GLenum, t.GLfloat))
    gl.glEvalCoord1f = gl_func( 'glEvalCoord1f', t.void, (t.GLfloat,))
    gl.glRasterPos2dv = gl_func( 'glRasterPos2dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glVertex3fv = gl_func( 'glVertex3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glColor4fv = gl_func( 'glColor4fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glGetPixelMapuiv = gl_func( 'glGetPixelMapuiv', t.void, (t.GLenum, ct.POINTER(t.GLuint)))
    gl.glTexCoord4sv = gl_func( 'glTexCoord4sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glTexParameteriv = gl_func( 'glTexParameteriv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetLightfv = gl_func( 'glGetLightfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glVertex2f = gl_func( 'glVertex2f', t.void, (t.GLfloat, t.GLfloat))
    gl.glGetBooleanv = gl_func( 'glGetBooleanv', t.void, (t.GLenum, ct.POINTER(t.GLboolean)))
    gl.glColor4b = gl_func( 'glColor4b', t.void, (t.GLbyte, t.GLbyte, t.GLbyte, t.GLbyte))
    gl.glTexCoord1fv = gl_func( 'glTexCoord1fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glRasterPos2sv = gl_func( 'glRasterPos2sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glGetTexEnviv = gl_func( 'glGetTexEnviv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glColor3s = gl_func( 'glColor3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glGetTexParameteriv = gl_func( 'glGetTexParameteriv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glTexCoord2i = gl_func( 'glTexCoord2i', t.void, (t.GLint, t.GLint))
    gl.glAccum = gl_func( 'glAccum', t.void, (t.GLenum, t.GLfloat))
    gl.glFlush = gl_func( 'glFlush', t.void, ())
    gl.glGetPolygonStipple = gl_func( 'glGetPolygonStipple', t.void, (ct.POINTER(t.GLubyte),))
    gl.glPixelStoref = gl_func( 'glPixelStoref', t.void, (t.GLenum, t.GLfloat))
    gl.glPolygonStipple = gl_func( 'glPolygonStipple', t.void, (ct.POINTER(t.GLubyte),))
    gl.glGetTexParameterfv = gl_func( 'glGetTexParameterfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glFinish = gl_func( 'glFinish', t.void, ())
    gl.glLoadMatrixf = gl_func( 'glLoadMatrixf', t.void, (ct.POINTER(t.GLfloat),))
    gl.glRectfv = gl_func( 'glRectfv', t.void, (ct.POINTER(t.GLfloat), ct.POINTER(t.GLfloat)))
    gl.glTexCoord1iv = gl_func( 'glTexCoord1iv', t.void, (ct.POINTER(t.GLint),))
    gl.glTexCoord3s = gl_func( 'glTexCoord3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glGetIntegerv = gl_func( 'glGetIntegerv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glLightModeliv = gl_func( 'glLightModeliv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glDepthFunc = gl_func( 'glDepthFunc', t.void, (t.GLenum,))
    gl.glGetMaterialfv = gl_func( 'glGetMaterialfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glMap1f = gl_func( 'glMap1f', t.void, (t.GLenum, t.GLfloat, t.GLfloat, t.GLint, t.GLint, ct.POINTER(t.GLfloat)))
    gl.glTexImage1D = gl_func( 'glTexImage1D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLint, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetString = gl_func( 'glGetString', ct.POINTER(t.GLubyte), (t.GLenum,))
    gl.glNormal3b = gl_func( 'glNormal3b', t.void, (t.GLbyte, t.GLbyte, t.GLbyte))
    gl.glPixelMapfv = gl_func( 'glPixelMapfv', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glEdgeFlagv = gl_func( 'glEdgeFlagv', t.void, (ct.POINTER(t.GLboolean),))
    gl.glNormal3s = gl_func( 'glNormal3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glMap2d = gl_func( 'glMap2d', t.void, (t.GLenum, t.GLdouble, t.GLdouble, t.GLint, t.GLint, t.GLdouble, t.GLdouble, t.GLint, t.GLint, ct.POINTER(t.GLdouble)))
    gl.glTexCoord3fv = gl_func( 'glTexCoord3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glStencilFunc = gl_func( 'glStencilFunc', t.void, (t.GLenum, t.GLint, t.GLuint))
    gl.glIsList = gl_func( 'glIsList', t.GLboolean, (t.GLuint,))
    gl.glVertex4iv = gl_func( 'glVertex4iv', t.void, (ct.POINTER(t.GLint),))
    gl.glRasterPos3sv = gl_func( 'glRasterPos3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glPolygonMode = gl_func( 'glPolygonMode', t.void, (t.GLenum, t.GLenum))
    gl.glDeleteLists = gl_func( 'glDeleteLists', t.void, (t.GLuint, t.GLsizei))
    gl.glPushName = gl_func( 'glPushName', t.void, (t.GLuint,))
    gl.glColor3iv = gl_func( 'glColor3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glRasterPos2fv = gl_func( 'glRasterPos2fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glVertex4s = gl_func( 'glVertex4s', t.void, (t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glClipPlane = gl_func( 'glClipPlane', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glTexCoord2iv = gl_func( 'glTexCoord2iv', t.void, (ct.POINTER(t.GLint),))
    gl.glRasterPos3i = gl_func( 'glRasterPos3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glStencilMask = gl_func( 'glStencilMask', t.void, (t.GLuint,))
    gl.glTexCoord2sv = gl_func( 'glTexCoord2sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glRasterPos3fv = gl_func( 'glRasterPos3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glPixelStorei = gl_func( 'glPixelStorei', t.void, (t.GLenum, t.GLint))
    gl.glGetMapdv = gl_func( 'glGetMapdv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glScissor = gl_func( 'glScissor', t.void, (t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glMateriali = gl_func( 'glMateriali', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glEvalPoint1 = gl_func( 'glEvalPoint1', t.void, (t.GLint,))
    gl.glIndexdv = gl_func( 'glIndexdv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glNormal3bv = gl_func( 'glNormal3bv', t.void, (ct.POINTER(t.GLbyte),))
    gl.glLightfv = gl_func( 'glLightfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glGetLightiv = gl_func( 'glGetLightiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glTexCoord4s = gl_func( 'glTexCoord4s', t.void, (t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glRasterPos4f = gl_func( 'glRasterPos4f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glDrawPixels = gl_func( 'glDrawPixels', t.void, (t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glTexCoord1f = gl_func( 'glTexCoord1f', t.void, (t.GLfloat,))
    gl.glTexImage2D = gl_func( 'glTexImage2D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLint, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetTexLevelParameteriv = gl_func( 'glGetTexLevelParameteriv', t.void, (t.GLenum, t.GLint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glVertex4sv = gl_func( 'glVertex4sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glLineStipple = gl_func( 'glLineStipple', t.void, (t.GLint, t.GLushort))
    gl.glCopyPixels = gl_func( 'glCopyPixels', t.void, (t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum))
    gl.glTexCoord4f = gl_func( 'glTexCoord4f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glDrawBuffer = gl_func( 'glDrawBuffer', t.void, (t.GLenum,))
    gl.glTexCoord4iv = gl_func( 'glTexCoord4iv', t.void, (ct.POINTER(t.GLint),))
    gl.glColor4iv = gl_func( 'glColor4iv', t.void, (ct.POINTER(t.GLint),))
    gl.glNormal3d = gl_func( 'glNormal3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glColor3fv = gl_func( 'glColor3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glTexEnvf = gl_func( 'glTexEnvf', t.void, (t.GLenum, t.GLenum, t.GLfloat))
    gl.glEvalCoord2d = gl_func( 'glEvalCoord2d', t.void, (t.GLdouble, t.GLdouble))
    gl.glColor4usv = gl_func( 'glColor4usv', t.void, (ct.POINTER(t.GLushort),))
    gl.glGetTexImage = gl_func( 'glGetTexImage', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glTexCoord2f = gl_func( 'glTexCoord2f', t.void, (t.GLfloat, t.GLfloat))
    gl.glColor3uiv = gl_func( 'glColor3uiv', t.void, (ct.POINTER(t.GLuint),))
    gl.glGetError = gl_func( 'glGetError', t.GLenum, ())
    gl.glColor3d = gl_func( 'glColor3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glColorMask = gl_func( 'glColorMask', t.void, (t.GLboolean, t.GLboolean, t.GLboolean, t.GLboolean))
    gl.glFeedbackBuffer = gl_func( 'glFeedbackBuffer', t.void, (t.GLsizei, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glEvalCoord2dv = gl_func( 'glEvalCoord2dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glGetTexGenfv = gl_func( 'glGetTexGenfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glBlendFunc = gl_func( 'glBlendFunc', t.void, (t.GLenum, t.GLenum))
    gl.glEvalCoord1dv = gl_func( 'glEvalCoord1dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glTexCoord4dv = gl_func( 'glTexCoord4dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glRectsv = gl_func( 'glRectsv', t.void, (ct.POINTER(t.GLshort), ct.POINTER(t.GLshort)))
    gl.glEnd = gl_func( 'glEnd', t.void, ())
    gl.glTexEnvfv = gl_func( 'glTexEnvfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glLightModeli = gl_func( 'glLightModeli', t.void, (t.GLenum, t.GLint))
    gl.glCullFace = gl_func( 'glCullFace', t.void, (t.GLenum,))
    gl.glGetDoublev = gl_func( 'glGetDoublev', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glTexGendv = gl_func( 'glTexGendv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glClearDepth = gl_func( 'glClearDepth', t.void, (t.GLdouble,))
    gl.glFogfv = gl_func( 'glFogfv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glTexCoord1s = gl_func( 'glTexCoord1s', t.void, (t.GLshort,))
    gl.glLogicOp = gl_func( 'glLogicOp', t.void, (t.GLenum,))
    gl.glColor3ui = gl_func( 'glColor3ui', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glMatrixMode = gl_func( 'glMatrixMode', t.void, (t.GLenum,))
    gl.glIndexi = gl_func( 'glIndexi', t.void, (t.GLint,))
    gl.glScaled = gl_func( 'glScaled', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glTexGenf = gl_func( 'glTexGenf', t.void, (t.GLenum, t.GLenum, t.GLfloat))
    gl.glLoadIdentity = gl_func( 'glLoadIdentity', t.void, ())
    gl.glVertex3d = gl_func( 'glVertex3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glNewList = gl_func( 'glNewList', t.void, (t.GLuint, t.GLenum))
    gl.glMapGrid1d = gl_func( 'glMapGrid1d', t.void, (t.GLint, t.GLdouble, t.GLdouble))
    gl.glGetFloatv = gl_func( 'glGetFloatv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glVertex3sv = gl_func( 'glVertex3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glPushAttrib = gl_func( 'glPushAttrib', t.void, (t.GLbitfield,))
    gl.glTexCoord3sv = gl_func( 'glTexCoord3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glRectdv = gl_func( 'glRectdv', t.void, (ct.POINTER(t.GLdouble), ct.POINTER(t.GLdouble)))
    gl.glColor4i = gl_func( 'glColor4i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glTranslatef = gl_func( 'glTranslatef', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glClearColor = gl_func( 'glClearColor', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glColor4dv = gl_func( 'glColor4dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glMaterialf = gl_func( 'glMaterialf', t.void, (t.GLenum, t.GLenum, t.GLfloat))
    gl.glBegin = gl_func( 'glBegin', t.void, (t.GLenum,))
    gl.glRasterPos3s = gl_func( 'glRasterPos3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glIndexs = gl_func( 'glIndexs', t.void, (t.GLshort,))
    gl.glTexCoord4i = gl_func( 'glTexCoord4i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glRectd = gl_func( 'glRectd', t.void, (t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glGetTexGeniv = gl_func( 'glGetTexGeniv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glRectiv = gl_func( 'glRectiv', t.void, (ct.POINTER(t.GLint), ct.POINTER(t.GLint)))
    gl.glClearIndex = gl_func( 'glClearIndex', t.void, (t.GLfloat,))
    gl.glColor3ub = gl_func( 'glColor3ub', t.void, (t.GLubyte, t.GLubyte, t.GLubyte))
    gl.glVertex4dv = gl_func( 'glVertex4dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glNormal3f = gl_func( 'glNormal3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glTexCoord2s = gl_func( 'glTexCoord2s', t.void, (t.GLshort, t.GLshort))
    gl.glTexCoord1d = gl_func( 'glTexCoord1d', t.void, (t.GLdouble,))
    gl.glColor4s = gl_func( 'glColor4s', t.void, (t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glDepthMask = gl_func( 'glDepthMask', t.void, (t.GLboolean,))
    gl.glIndexf = gl_func( 'glIndexf', t.void, (t.GLfloat,))
    gl.glRasterPos4s = gl_func( 'glRasterPos4s', t.void, (t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glGetTexGendv = gl_func( 'glGetTexGendv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glColor3dv = gl_func( 'glColor3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glRasterPos4i = gl_func( 'glRasterPos4i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glPushMatrix = gl_func( 'glPushMatrix', t.void, ())
    gl.glEnable = gl_func( 'glEnable', t.void, (t.GLenum,))
    gl.glPopMatrix = gl_func( 'glPopMatrix', t.void, ())
    gl.glRasterPos2iv = gl_func( 'glRasterPos2iv', t.void, (ct.POINTER(t.GLint),))
    gl.glGetPixelMapfv = gl_func( 'glGetPixelMapfv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glNormal3fv = gl_func( 'glNormal3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glVertex4fv = gl_func( 'glVertex4fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glTexGeni = gl_func( 'glTexGeni', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glRasterPos4dv = gl_func( 'glRasterPos4dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glReadPixels = gl_func( 'glReadPixels', t.void, (t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glTexCoord3iv = gl_func( 'glTexCoord3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glReadBuffer = gl_func( 'glReadBuffer', t.void, (t.GLenum,))
    gl.glMultMatrixf = gl_func( 'glMultMatrixf', t.void, (ct.POINTER(t.GLfloat),))
    gl.glLightModelfv = gl_func( 'glLightModelfv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glTexGend = gl_func( 'glTexGend', t.void, (t.GLenum, t.GLenum, t.GLdouble))
    gl.glPixelMapusv = gl_func( 'glPixelMapusv', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLushort)))
    gl.glStencilOp = gl_func( 'glStencilOp', t.void, (t.GLenum, t.GLenum, t.GLenum))
    gl.glColorMaterial = gl_func( 'glColorMaterial', t.void, (t.GLenum, t.GLenum))
    gl.glVertex2d = gl_func( 'glVertex2d', t.void, (t.GLdouble, t.GLdouble))
    gl.glGetTexEnvfv = gl_func( 'glGetTexEnvfv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glEvalMesh2 = gl_func( 'glEvalMesh2', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint))

#### GL VERSION 1.1 ####
GL_COLOR_ARRAY_TYPE = 0x8082
GL_LIGHT_MODEL_AMBIENT = 0x0B53
GL_MAP_COLOR = 0x0D10
GL_VERTEX_ARRAY_STRIDE = 0x807C
GL_ACCUM_RED_BITS = 0x0D58
GL_ONE_MINUS_DST_COLOR = 0x0307
GL_INDEX_LOGIC_OP = 0x0BF1
GL_INTENSITY12 = 0x804C
GL_LIGHTING_BIT = 0x00000040
GL_DEPTH_FUNC = 0x0B74
GL_CURRENT_NORMAL = 0x0B02
GL_OR_REVERSE = 0x150B
GL_TEXTURE_ENV = 0x2300
GL_LIST_INDEX = 0x0B33
GL_NOOP = 0x1505
GL_STENCIL_TEST = 0x0B90
GL_DOUBLE = 0x140A
GL_TRIANGLE_STRIP = 0x0005
GL_DEPTH_CLEAR_VALUE = 0x0B73
GL_POINT_BIT = 0x00000002
GL_COLOR_BUFFER_BIT = 0x00004000
GL_PROJECTION = 0x1701
GL_TEXTURE_ALPHA_SIZE = 0x805F
GL_MAP2_GRID_DOMAIN = 0x0DD2
GL_CLIP_PLANE2 = 0x3002
GL_STENCIL_INDEX = 0x1901
GL_OBJECT_PLANE = 0x2501
GL_FLAT = 0x1D00
GL_LUMINANCE4 = 0x803F
GL_COLOR_MATERIAL = 0x0B57
GL_MAP1_VERTEX_3 = 0x0D97
GL_VERSION = 0x1F02
GL_PIXEL_MAP_I_TO_R = 0x0C72
GL_ALL_ATTRIB_BITS = 0xFFFFFFFF
GL_SCISSOR_BIT = 0x00080000
GL_RGBA_MODE = 0x0C31
GL_AUTO_NORMAL = 0x0D80
GL_NAME_STACK_DEPTH = 0x0D70
GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4
GL_CONSTANT_ATTENUATION = 0x1207
GL_LUMINANCE = 0x1909
GL_COLOR_MATERIAL_PARAMETER = 0x0B56
GL_TEXTURE = 0x1702
GL_AUX1 = 0x040A
GL_COLOR_WRITEMASK = 0x0C23
GL_TEXTURE_ENV_COLOR = 0x2201
GL_LEQUAL = 0x0203
GL_CURRENT_RASTER_POSITION_VALID = 0x0B08
GL_TEXTURE_BORDER = 0x1005
GL_MAX_NAME_STACK_DEPTH = 0x0D37
GL_MODULATE = 0x2100
GL_ACCUM_BUFFER_BIT = 0x00000200
GL_TEXTURE_GEN_R = 0x0C62
GL_FOG_DENSITY = 0x0B62
GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5
GL_SMOOTH = 0x1D01
GL_EDGE_FLAG = 0x0B43
GL_TRIANGLE_FAN = 0x0006
GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002
GL_COLOR_ARRAY_POINTER = 0x8090
GL_DEPTH_TEST = 0x0B71
GL_MAX_LIGHTS = 0x0D31
GL_LINE_WIDTH_GRANULARITY = 0x0B23
GL_UNPACK_LSB_FIRST = 0x0CF1
GL_MODELVIEW = 0x1700
GL_SRC_ALPHA = 0x0302
GL_RED_BIAS = 0x0D15
GL_C3F_V3F = 0x2A24
GL_TEXTURE_GEN_Q = 0x0C63
GL_FOG_HINT = 0x0C54
GL_LINE_STRIP = 0x0003
GL_BACK_RIGHT = 0x0403
GL_MAX_PIXEL_MAP_TABLE = 0x0D34
GL_AMBIENT = 0x1200
GL_COPY = 0x1503
GL_LOGIC_OP_MODE = 0x0BF0
GL_T2F_C4UB_V3F = 0x2A29
GL_T2F_C3F_V3F = 0x2A2A
GL_NORMAL_ARRAY = 0x8075
GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088
GL_GREEN_BIAS = 0x0D19
GL_RGBA = 0x1908
GL_OUT_OF_MEMORY = 0x0505
GL_BLUE_BITS = 0x0D54
GL_PACK_ALIGNMENT = 0x0D05
GL_CW = 0x0900
GL_PROXY_TEXTURE_1D = 0x8063
GL_OBJECT_LINEAR = 0x2401
GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38
GL_TEXTURE_GEN_T = 0x0C61
GL_FOG_MODE = 0x0B65
GL_PACK_LSB_FIRST = 0x0D01
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B
GL_MAP1_GRID_SEGMENTS = 0x0DD1
GL_3D_COLOR_TEXTURE = 0x0603
GL_POLYGON_STIPPLE = 0x0B42
GL_RGBA12 = 0x805A
GL_LINEAR = 0x2601
GL_COLOR_ARRAY = 0x8076
GL_LINE_BIT = 0x00000004
GL_LINEAR_MIPMAP_LINEAR = 0x2703
GL_LUMINANCE_ALPHA = 0x190A
GL_LINE_SMOOTH_HINT = 0x0C52
GL_COLOR_MATERIAL_FACE = 0x0B55
GL_PIXEL_MAP_B_TO_B = 0x0C78
GL_SUBPIXEL_BITS = 0x0D50
GL_LINEAR_ATTENUATION = 0x1208
GL_FRONT_AND_BACK = 0x0408
GL_POLYGON_OFFSET_UNITS = 0x2A00
GL_NORMAL_ARRAY_TYPE = 0x807E
GL_PACK_SKIP_PIXELS = 0x0D04
GL_UNPACK_SWAP_BYTES = 0x0CF0
GL_UNSIGNED_SHORT = 0x1403
GL_T2F_C4F_N3F_V3F = 0x2A2C
GL_COLOR_INDEX = 0x1900
GL_CURRENT_INDEX = 0x0B01
GL_MAP1_NORMAL = 0x0D92
GL_MAP2_VERTEX_3 = 0x0DB7
GL_TEXTURE_ENV_MODE = 0x2200
GL_VIEWPORT = 0x0BA2
GL_QUAD_STRIP = 0x0008
GL_COMPILE = 0x1300
GL_CURRENT_RASTER_DISTANCE = 0x0B09
GL_ATTRIB_STACK_DEPTH = 0x0BB0
GL_RGBA16 = 0x805B
GL_POLYGON_OFFSET_FILL = 0x8037
GL_POINT_TOKEN = 0x0701
GL_POLYGON_SMOOTH = 0x0B41
GL_T = 0x2001
GL_BYTE = 0x1400
GL_CURRENT_RASTER_POSITION = 0x0B07
GL_VERTEX_ARRAY_POINTER = 0x808E
GL_DEPTH_WRITEMASK = 0x0B72
GL_LIGHT7 = 0x4007
GL_COEFF = 0x0A00
GL_RETURN = 0x0102
GL_FEEDBACK_BUFFER_TYPE = 0x0DF2
GL_MAX_EVAL_ORDER = 0x0D30
GL_STACK_OVERFLOW = 0x0503
GL_LIST_BASE = 0x0B32
GL_TEXTURE_PRIORITY = 0x8066
GL_C4UB_V3F = 0x2A23
GL_INDEX_ARRAY_POINTER = 0x8091
GL_LINEAR_MIPMAP_NEAREST = 0x2701
GL_CULL_FACE_MODE = 0x0B45
GL_INVALID_OPERATION = 0x0502
GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092
GL_COLOR_ARRAY_SIZE = 0x8081
GL_BLUE_SCALE = 0x0D1A
GL_VERTEX_ARRAY = 0x8074
GL_CLAMP = 0x2900
GL_SPOT_DIRECTION = 0x1204
GL_BLUE_BIAS = 0x0D1B
GL_POSITION = 0x1203
GL_ALPHA_TEST_REF = 0x0BC2
GL_TEXTURE_RED_SIZE = 0x805C
GL_FEEDBACK_BUFFER_SIZE = 0x0DF1
GL_DRAW_BUFFER = 0x0C01
GL_AUX_BUFFERS = 0x0C00
GL_SHININESS = 0x1601
GL_RGB4 = 0x804F
GL_MAP1_GRID_DOMAIN = 0x0DD0
GL_EDGE_FLAG_ARRAY_POINTER = 0x8093
GL_EVAL_BIT = 0x00010000
GL_AUX0 = 0x0409
GL_PACK_SWAP_BYTES = 0x0D00
GL_SHADE_MODEL = 0x0B54
GL_ALPHA_TEST_FUNC = 0x0BC1
GL_NAND = 0x150E
GL_LUMINANCE12 = 0x8041
GL_LIST_MODE = 0x0B30
GL_TEXTURE_LUMINANCE_SIZE = 0x8060
GL_INCR = 0x1E02
GL_DST_ALPHA = 0x0304
GL_2_BYTES = 0x1407
GL_LUMINANCE16 = 0x8042
GL_READ_BUFFER = 0x0C02
GL_INTENSITY = 0x8049
GL_NORMALIZE = 0x0BA1
GL_CLIP_PLANE0 = 0x3000
GL_T2F_N3F_V3F = 0x2A2B
GL_TEXTURE_MIN_FILTER = 0x2801
GL_NEAREST_MIPMAP_LINEAR = 0x2702
GL_PROXY_TEXTURE_2D = 0x8064
GL_INDEX_OFFSET = 0x0D13
GL_LOAD = 0x0101
GL_PACK_ROW_LENGTH = 0x0D02
GL_STENCIL_BUFFER_BIT = 0x00000400
GL_ALPHA12 = 0x803D
GL_AMBIENT_AND_DIFFUSE = 0x1602
GL_ALPHA4 = 0x803B
GL_RED_BITS = 0x0D52
GL_POLYGON_OFFSET_LINE = 0x2A02
GL_RGBA2 = 0x8055
GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF
GL_INDEX_ARRAY = 0x8077
GL_SPECULAR = 0x1202
GL_TEXTURE_MAG_FILTER = 0x2800
GL_COPY_INVERTED = 0x150C
GL_INTENSITY4 = 0x804A
GL_FOG_BIT = 0x00000080
GL_V3F = 0x2A21
GL_SPOT_CUTOFF = 0x1206
GL_RENDER_MODE = 0x0C40
GL_LIGHT2 = 0x4002
GL_FASTEST = 0x1101
GL_POLYGON_MODE = 0x0B40
GL_UNSIGNED_INT = 0x1405
GL_DECR = 0x1E03
GL_PIXEL_MAP_R_TO_R = 0x0C76
GL_3D_COLOR = 0x0602
GL_LINES = 0x0001
GL_LINE_SMOOTH = 0x0B20
GL_COLOR = 0x1800
GL_SPHERE_MAP = 0x2402
GL_MODELVIEW_STACK_DEPTH = 0x0BA3
GL_LIGHT4 = 0x4004
GL_PACK_SKIP_ROWS = 0x0D03
GL_RED_SCALE = 0x0D14
GL_EXTENSIONS = 0x1F03
GL_COLOR_INDEXES = 0x1603
GL_BITMAP = 0x1A00
GL_CULL_FACE = 0x0B44
GL_MAP2_TEXTURE_COORD_1 = 0x0DB3
GL_DEPTH_BITS = 0x0D56
GL_POLYGON_SMOOTH_HINT = 0x0C53
GL_LINE_STIPPLE = 0x0B24
GL_STENCIL_FUNC = 0x0B92
GL_FOG_COLOR = 0x0B66
GL_BLEND_DST = 0x0BE0
GL_TEXTURE_WIDTH = 0x1000
GL_T2F_V3F = 0x2A27
GL_TEXTURE_BIT = 0x00040000
GL_ALPHA_BITS = 0x0D55
GL_STENCIL_CLEAR_VALUE = 0x0B91
GL_INVERT = 0x150A
GL_TEXTURE_INTENSITY_SIZE = 0x8061
GL_DEPTH_SCALE = 0x0D1E
GL_CLEAR = 0x1500
GL_GREATER = 0x0204
GL_INDEX_BITS = 0x0D51
GL_COLOR_LOGIC_OP = 0x0BF2
GL_MAX_LIST_NESTING = 0x0B31
GL_LIGHT1 = 0x4001
GL_POINTS = 0x0000
GL_RGB16 = 0x8054
GL_CURRENT_BIT = 0x00000001
GL_BITMAP_TOKEN = 0x0704
GL_FILL = 0x1B02
GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089
GL_LINE_WIDTH_RANGE = 0x0B22
GL_CURRENT_RASTER_COLOR = 0x0B04
GL_UNPACK_SKIP_PIXELS = 0x0CF4
GL_T4F_C4F_N3F_V4F = 0x2A2D
GL_FOG_START = 0x0B63
GL_SRC_COLOR = 0x0300
GL_REPEAT = 0x2901
GL_ACCUM = 0x0100
GL_LESS = 0x0201
GL_AUX3 = 0x040C
GL_DRAW_PIXEL_TOKEN = 0x0705
GL_NOTEQUAL = 0x0205
GL_ALWAYS = 0x0207
GL_PIXEL_MAP_I_TO_I = 0x0C70
GL_LEFT = 0x0406
GL_SET = 0x150F
GL_LIGHT5 = 0x4005
GL_DEPTH_BUFFER_BIT = 0x00000100
GL_EXP2 = 0x0801
GL_T4F_V4F = 0x2A28
GL_Q = 0x2003
GL_RGB10_A2 = 0x8059
GL_INDEX_ARRAY_STRIDE = 0x8086
GL_CLIP_PLANE5 = 0x3005
GL_REPLACE = 0x1E01
GL_RGB12 = 0x8053
GL_LINE_STIPPLE_PATTERN = 0x0B25
GL_VIEWPORT_BIT = 0x00000800
GL_PASS_THROUGH_TOKEN = 0x0700
GL_EXP = 0x0800
GL_VERTEX_ARRAY_SIZE = 0x807A
GL_RGB8 = 0x8051
GL_NO_ERROR = 0
GL_POLYGON_OFFSET_POINT = 0x2A01
GL_SCISSOR_BOX = 0x0C10
GL_ONE_MINUS_SRC_COLOR = 0x0301
GL_STENCIL_WRITEMASK = 0x0B98
GL_FEEDBACK_BUFFER_POINTER = 0x0DF0
GL_TEXTURE_GEN_MODE = 0x2500
GL_FEEDBACK = 0x1C01
GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C
GL_INT = 0x1404
GL_RGB10 = 0x8052
GL_FRONT_LEFT = 0x0400
GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36
GL_PROJECTION_MATRIX = 0x0BA7
GL_MAP2_TEXTURE_COORD_4 = 0x0DB6
GL_FOG = 0x0B60
GL_AND_INVERTED = 0x1504
GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0
GL_FOG_END = 0x0B64
GL_OR = 0x1507
GL_TEXTURE_STACK_DEPTH = 0x0BA5
GL_INTENSITY16 = 0x804D
GL_INDEX_WRITEMASK = 0x0C21
GL_ZOOM_Y = 0x0D17
GL_RGB5_A1 = 0x8057
GL_VENDOR = 0x1F00
GL_CURRENT_TEXTURE_COORDS = 0x0B03
GL_STEREO = 0x0C33
GL_LIGHT6 = 0x4006
GL_DEPTH_RANGE = 0x0B70
GL_KEEP = 0x1E00
GL_FLOAT = 0x1406
GL_TEXTURE_GREEN_SIZE = 0x805D
GL_DST_COLOR = 0x0306
GL_TEXTURE_COORD_ARRAY = 0x8078
GL_LIGHT0 = 0x4000
GL_MAP2_VERTEX_4 = 0x0DB8
GL_UNPACK_ROW_LENGTH = 0x0CF2
GL_NEAREST = 0x2600
GL_DECAL = 0x2101
GL_STENCIL = 0x1802
GL_INDEX_CLEAR_VALUE = 0x0C20
GL_TRUE = 1
GL_EQUIV = 0x1509
GL_PIXEL_MAP_I_TO_G = 0x0C73
GL_LINE_STIPPLE_REPEAT = 0x0B26
GL_DEPTH = 0x1801
GL_ZOOM_X = 0x0D16
GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1
GL_AND = 0x1501
GL_LUMINANCE6_ALPHA2 = 0x8044
GL_FRONT_RIGHT = 0x0401
GL_UNPACK_SKIP_ROWS = 0x0CF3
GL_BLUE = 0x1905
GL_MAX_TEXTURE_SIZE = 0x0D33
GL_STACK_UNDERFLOW = 0x0504
GL_NONE = 0
GL_ONE = 1
GL_MAP2_NORMAL = 0x0DB2
GL_DIFFUSE = 0x1201
GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51
GL_INDEX_SHIFT = 0x0D12
GL_QUADRATIC_ATTENUATION = 0x1209
GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6
GL_LUMINANCE12_ALPHA4 = 0x8046
GL_LINE = 0x1B01
GL_COLOR_CLEAR_VALUE = 0x0C22
GL_EDGE_FLAG_ARRAY = 0x8079
GL_ALPHA_BIAS = 0x0D1D
GL_DOUBLEBUFFER = 0x0C32
GL_3_BYTES = 0x1408
GL_LIST_BIT = 0x00020000
GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A
GL_TEXTURE_1D = 0x0DE0
GL_PIXEL_MAP_G_TO_G = 0x0C77
GL_LUMINANCE4_ALPHA4 = 0x8043
GL_BLEND_SRC = 0x0BE1
GL_MAX_CLIP_PLANES = 0x0D32
GL_ALPHA_SCALE = 0x0D1C
GL_UNSIGNED_BYTE = 0x1401
GL_FALSE = 0
GL_SRC_ALPHA_SATURATE = 0x0308
GL_INDEX_MODE = 0x0C30
GL_LIGHTING = 0x0B50
GL_MAP2_TEXTURE_COORD_2 = 0x0DB4
GL_MAP_STENCIL = 0x0D11
GL_ONE_MINUS_SRC_ALPHA = 0x0303
GL_R = 0x2002
GL_MAP1_INDEX = 0x0D91
GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3
GL_LOGIC_OP = 0x0BF1
GL_LINE_RESET_TOKEN = 0x0707
GL_NOR = 0x1508
GL_3D = 0x0601
GL_FRONT = 0x0404
GL_AND_REVERSE = 0x1502
GL_DEPTH_BIAS = 0x0D1F
GL_TEXTURE_GEN_S = 0x0C60
GL_TEXTURE_MATRIX = 0x0BA8
GL_POINT_SMOOTH = 0x0B10
GL_RED = 0x1903
GL_EYE_LINEAR = 0x2400
GL_GREEN_SCALE = 0x0D18
GL_POINT_SMOOTH_HINT = 0x0C51
GL_DITHER = 0x0BD0
GL_TEXTURE_INTERNAL_FORMAT = 0x1003
GL_TEXTURE_BINDING_2D = 0x8069
GL_STENCIL_REF = 0x0B97
GL_LUMINANCE12_ALPHA12 = 0x8047
GL_N3F_V3F = 0x2A25
GL_PIXEL_MAP_A_TO_A = 0x0C79
GL_TEXTURE_BINDING_1D = 0x8068
GL_OR_INVERTED = 0x150D
GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35
GL_LINE_TOKEN = 0x0702
GL_C4UB_V2F = 0x2A22
GL_TRIANGLES = 0x0004
GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50
GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9
GL_TEXTURE_COMPONENTS = 0x1003
GL_RGBA4 = 0x8056
GL_RIGHT = 0x0407
GL_SELECTION_BUFFER_SIZE = 0x0DF4
GL_EMISSION = 0x1600
GL_RGBA8 = 0x8058
GL_EYE_PLANE = 0x2502
GL_SELECTION_BUFFER_POINTER = 0x0DF3
GL_ENABLE_BIT = 0x00002000
GL_HINT_BIT = 0x00008000
GL_MAP1_TEXTURE_COORD_4 = 0x0D96
GL_MAP2_GRID_SEGMENTS = 0x0DD3
GL_ZERO = 0
GL_ALPHA = 0x1906
GL_LUMINANCE8 = 0x8040
GL_COPY_PIXEL_TOKEN = 0x0706
GL_CLIP_PLANE4 = 0x3004
GL_MAP2_COLOR_4 = 0x0DB0
GL_GREEN_BITS = 0x0D53
GL_SCISSOR_TEST = 0x0C11
GL_MAP1_COLOR_4 = 0x0D90
GL_BACK = 0x0405
GL_ONE_MINUS_DST_ALPHA = 0x0305
GL_CURRENT_RASTER_INDEX = 0x0B05
GL_C4F_N3F_V3F = 0x2A26
GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06
GL_RGB = 0x1907
GL_POINT_SIZE_RANGE = 0x0B12
GL_TRANSFORM_BIT = 0x00001000
GL_S = 0x2000
GL_MAX_VIEWPORT_DIMS = 0x0D3A
GL_SHORT = 0x1402
GL_PROJECTION_STACK_DEPTH = 0x0BA4
GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95
GL_QUADS = 0x0007
GL_SPOT_EXPONENT = 0x1205
GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1
GL_CCW = 0x0901
GL_RENDERER = 0x1F01
GL_STENCIL_BITS = 0x0D57
GL_TEXTURE_2D = 0x0DE1
GL_INTENSITY8 = 0x804B
GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39
GL_TEXTURE_HEIGHT = 0x1001
GL_POLYGON_STIPPLE_BIT = 0x00000010
GL_ACCUM_BLUE_BITS = 0x0D5A
GL_SELECT = 0x1C02
GL_ACCUM_ALPHA_BITS = 0x0D5B
GL_ALPHA_TEST = 0x0BC0
GL_MATRIX_MODE = 0x0BA0
GL_MAP1_TEXTURE_COORD_3 = 0x0D95
GL_VERTEX_ARRAY_TYPE = 0x807B
GL_LINE_LOOP = 0x0002
GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7
GL_DONT_CARE = 0x1100
GL_BACK_LEFT = 0x0402
GL_POLYGON_OFFSET_FACTOR = 0x8038
GL_TEXTURE_WRAP_T = 0x2803
GL_V2F = 0x2A20
GL_TEXTURE_BLUE_SIZE = 0x805E
GL_FOG_INDEX = 0x0B61
GL_INDEX_ARRAY_TYPE = 0x8085
GL_R3_G3_B2 = 0x2A10
GL_MAP1_VERTEX_4 = 0x0D98
GL_POLYGON_TOKEN = 0x0703
GL_MODELVIEW_MATRIX = 0x0BA6
GL_INVALID_VALUE = 0x0501
GL_STENCIL_PASS_DEPTH_PASS = 0x0B96
GL_AUX2 = 0x040B
GL_PIXEL_MAP_I_TO_B = 0x0C74
GL_ALPHA8 = 0x803C
GL_PIXEL_MAP_S_TO_S = 0x0C71
GL_EQUAL = 0x0202
GL_COMPILE_AND_EXECUTE = 0x1301
GL_LIGHT_MODEL_TWO_SIDE = 0x0B52
GL_CLIP_PLANE3 = 0x3003
GL_POLYGON_BIT = 0x00000008
GL_GREEN = 0x1904
GL_ADD = 0x0104
GL_LIGHT3 = 0x4003
GL_POINT_SIZE = 0x0B11
GL_4D_COLOR_TEXTURE = 0x0604
GL_XOR = 0x1506
GL_MAP2_TEXTURE_COORD_3 = 0x0DB5
GL_ALPHA16 = 0x803E
GL_POINT = 0x1B00
GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8
GL_INVALID_ENUM = 0x0500
GL_LUMINANCE16_ALPHA16 = 0x8048
GL_ACCUM_GREEN_BITS = 0x0D59
GL_4_BYTES = 0x1409
GL_ORDER = 0x0A01
GL_MAP1_TEXTURE_COORD_2 = 0x0D94
GL_LINE_WIDTH = 0x0B21
GL_DEPTH_COMPONENT = 0x1902
GL_CURRENT_COLOR = 0x0B00
GL_MAP2_INDEX = 0x0DB1
GL_NEAREST_MIPMAP_NEAREST = 0x2700
GL_ACCUM_CLEAR_VALUE = 0x0B80
GL_POINT_SIZE_GRANULARITY = 0x0B13
GL_NORMAL_ARRAY_STRIDE = 0x807F
GL_MULT = 0x0103
GL_POLYGON = 0x0009
GL_TEXTURE_BORDER_COLOR = 0x1004
GL_NORMAL_ARRAY_POINTER = 0x808F
GL_BLEND = 0x0BE2
GL_RENDER = 0x1C00
GL_COLOR_ARRAY_STRIDE = 0x8083
GL_PIXEL_MODE_BIT = 0x00000020
GL_CLIP_PLANE1 = 0x3001
GL_2D = 0x0600
GL_DOMAIN = 0x0A02
GL_CLIENT_PIXEL_STORE_BIT = 0x00000001
GL_TEXTURE_WRAP_S = 0x2802
GL_STENCIL_VALUE_MASK = 0x0B93
GL_GEQUAL = 0x0206
GL_NEVER = 0x0200
GL_FRONT_FACE = 0x0B46
GL_MAP1_TEXTURE_COORD_1 = 0x0D93
GL_RGB5 = 0x8050
GL_PIXEL_MAP_I_TO_A = 0x0C75
GL_TEXTURE_RESIDENT = 0x8067
GL_STENCIL_FAIL = 0x0B94
GL_LUMINANCE8_ALPHA8 = 0x8045
GL_NICEST = 0x1102
GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2
GL_UNPACK_ALIGNMENT = 0x0CF5

def init_gl_version_1_1():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glIndexubv = gl_func( 'glIndexubv', t.void, (ct.POINTER(t.GLubyte),))
    gl.glEnableClientState = gl_func( 'glEnableClientState', t.void, (t.GLenum,))
    gl.glNormalPointer = gl_func( 'glNormalPointer', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glAreTexturesResident = gl_func( 'glAreTexturesResident', t.GLboolean, (t.GLsizei, ct.POINTER(t.GLuint), ct.POINTER(t.GLboolean)))
    gl.glVertexPointer = gl_func( 'glVertexPointer', t.void, (t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glCopyTexSubImage1D = gl_func( 'glCopyTexSubImage1D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei))
    gl.glBindTexture = gl_func( 'glBindTexture', t.void, (t.GLenum, t.GLuint))
    gl.glGetPointerv = gl_func( 'glGetPointerv', t.void, (t.GLenum, ct.POINTER(ct.POINTER(t.void))))
    gl.glArrayElement = gl_func( 'glArrayElement', t.void, (t.GLint,))
    gl.glCopyTexSubImage2D = gl_func( 'glCopyTexSubImage2D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glIndexub = gl_func( 'glIndexub', t.void, (t.GLubyte,))
    gl.glTexCoordPointer = gl_func( 'glTexCoordPointer', t.void, (t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glDrawElements = gl_func( 'glDrawElements', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void)))
    gl.glCopyTexImage1D = gl_func( 'glCopyTexImage1D', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLint))
    gl.glEdgeFlagPointer = gl_func( 'glEdgeFlagPointer', t.void, (t.GLsizei, ct.POINTER(t.void)))
    gl.glDrawArrays = gl_func( 'glDrawArrays', t.void, (t.GLenum, t.GLint, t.GLsizei))
    gl.glPrioritizeTextures = gl_func( 'glPrioritizeTextures', t.void, (t.GLsizei, ct.POINTER(t.GLuint), ct.POINTER(t.GLfloat)))
    gl.glPolygonOffset = gl_func( 'glPolygonOffset', t.void, (t.GLfloat, t.GLfloat))
    gl.glDeleteTextures = gl_func( 'glDeleteTextures', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glTexSubImage1D = gl_func( 'glTexSubImage1D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glPushClientAttrib = gl_func( 'glPushClientAttrib', t.void, (t.GLbitfield,))
    gl.glColorPointer = gl_func( 'glColorPointer', t.void, (t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glTexSubImage2D = gl_func( 'glTexSubImage2D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glPopClientAttrib = gl_func( 'glPopClientAttrib', t.void, ())
    gl.glIsTexture = gl_func( 'glIsTexture', t.GLboolean, (t.GLuint,))
    gl.glInterleavedArrays = gl_func( 'glInterleavedArrays', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glDisableClientState = gl_func( 'glDisableClientState', t.void, (t.GLenum,))
    gl.glGenTextures = gl_func( 'glGenTextures', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glCopyTexImage2D = gl_func( 'glCopyTexImage2D', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLint))
    gl.glIndexPointer = gl_func( 'glIndexPointer', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.void)))

#### GL VERSION 1.2 ####
GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364
GL_TEXTURE_MAX_LEVEL = 0x813D
GL_MAX_ELEMENTS_INDICES = 0x80E9
GL_PACK_SKIP_IMAGES = 0x806B
GL_ALIASED_POINT_SIZE_RANGE = 0x846D
GL_TEXTURE_MAX_LOD = 0x813B
GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22
GL_PACK_IMAGE_HEIGHT = 0x806C
GL_TEXTURE_WRAP_R = 0x8072
GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
GL_CLAMP_TO_EDGE = 0x812F
GL_PROXY_TEXTURE_3D = 0x8070
GL_BGR = 0x80E0
GL_MAX_3D_TEXTURE_SIZE = 0x8073
GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034
GL_BGRA = 0x80E1
GL_SEPARATE_SPECULAR_COLOR = 0x81FA
GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362
GL_TEXTURE_MIN_LOD = 0x813A
GL_UNSIGNED_INT_8_8_8_8 = 0x8035
GL_TEXTURE_BASE_LEVEL = 0x813C
GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
GL_UNSIGNED_SHORT_5_6_5 = 0x8363
GL_UNSIGNED_BYTE_3_3_2 = 0x8032
GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368
GL_ALIASED_LINE_WIDTH_RANGE = 0x846E
GL_UNPACK_SKIP_IMAGES = 0x806D
GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367
GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033
GL_RESCALE_NORMAL = 0x803A
GL_TEXTURE_BINDING_3D = 0x806A
GL_UNSIGNED_INT_10_10_10_2 = 0x8036
GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
GL_MAX_ELEMENTS_VERTICES = 0x80E8
GL_TEXTURE_3D = 0x806F
GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12
GL_TEXTURE_DEPTH = 0x8071
GL_SINGLE_COLOR = 0x81F9
GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8
GL_UNPACK_IMAGE_HEIGHT = 0x806E

def init_gl_version_1_2():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glTexSubImage3D = gl_func( 'glTexSubImage3D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glTexImage3D = gl_func( 'glTexImage3D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLint, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glDrawRangeElements = gl_func( 'glDrawRangeElements', t.void, (t.GLenum, t.GLuint, t.GLuint, t.GLsizei, t.GLenum, ct.POINTER(t.void)))
    gl.glCopyTexSubImage3D = gl_func( 'glCopyTexSubImage3D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei))

#### GL VERSION 1.3 ####
GL_COMPRESSED_LUMINANCE = 0x84EA
GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
GL_TEXTURE2 = 0x84C2
GL_SOURCE2_RGB = 0x8582
GL_ADD_SIGNED = 0x8574
GL_COMPRESSED_INTENSITY = 0x84EC
GL_MAX_TEXTURE_UNITS = 0x84E2
GL_PRIMARY_COLOR = 0x8577
GL_TEXTURE19 = 0x84D3
GL_DOT3_RGBA = 0x86AF
GL_SAMPLES = 0x80A9
GL_CONSTANT = 0x8576
GL_OPERAND1_ALPHA = 0x8599
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
GL_MULTISAMPLE = 0x809D
GL_SOURCE1_ALPHA = 0x8589
GL_SAMPLE_COVERAGE_VALUE = 0x80AA
GL_TEXTURE23 = 0x84D7
GL_TEXTURE10 = 0x84CA
GL_CLAMP_TO_BORDER = 0x812D
GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
GL_OPERAND2_RGB = 0x8592
GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4
GL_INTERPOLATE = 0x8575
GL_SAMPLE_COVERAGE = 0x80A0
GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E
GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5
GL_SOURCE1_RGB = 0x8581
GL_ACTIVE_TEXTURE = 0x84E0
GL_MULTISAMPLE_BIT = 0x20000000
GL_TEXTURE22 = 0x84D6
GL_TEXTURE15 = 0x84CF
GL_PREVIOUS = 0x8578
GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
GL_TEXTURE18 = 0x84D2
GL_TRANSPOSE_COLOR_MATRIX = 0x84E6
GL_TEXTURE26 = 0x84DA
GL_TEXTURE27 = 0x84DB
GL_TEXTURE31 = 0x84DF
GL_TEXTURE28 = 0x84DC
GL_TEXTURE6 = 0x84C6
GL_TEXTURE14 = 0x84CE
GL_COMPRESSED_ALPHA = 0x84E9
GL_SOURCE0_RGB = 0x8580
GL_DOT3_RGB = 0x86AE
GL_CLIENT_ACTIVE_TEXTURE = 0x84E1
GL_COMBINE_ALPHA = 0x8572
GL_COMPRESSED_RGB = 0x84ED
GL_SOURCE2_ALPHA = 0x858A
GL_OPERAND1_RGB = 0x8591
GL_PROXY_TEXTURE_CUBE_MAP = 0x851B
GL_TEXTURE12 = 0x84CC
GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
GL_TEXTURE21 = 0x84D5
GL_TEXTURE11 = 0x84CB
GL_OPERAND0_ALPHA = 0x8598
GL_TEXTURE_CUBE_MAP = 0x8513
GL_TEXTURE3 = 0x84C3
GL_TEXTURE16 = 0x84D0
GL_REFLECTION_MAP = 0x8512
GL_TEXTURE_COMPRESSION_HINT = 0x84EF
GL_TEXTURE20 = 0x84D4
GL_TEXTURE7 = 0x84C7
GL_TEXTURE5 = 0x84C5
GL_COMBINE_RGB = 0x8571
GL_TEXTURE1 = 0x84C1
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
GL_SUBTRACT = 0x84E7
GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3
GL_SAMPLE_ALPHA_TO_ONE = 0x809F
GL_TEXTURE_COMPRESSED = 0x86A1
GL_TEXTURE8 = 0x84C8
GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
GL_SAMPLE_COVERAGE_INVERT = 0x80AB
GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3
GL_OPERAND2_ALPHA = 0x859A
GL_TEXTURE29 = 0x84DD
GL_RGB_SCALE = 0x8573
GL_SOURCE0_ALPHA = 0x8588
GL_TEXTURE17 = 0x84D1
GL_TEXTURE25 = 0x84D9
GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
GL_COMPRESSED_RGBA = 0x84EE
GL_NORMAL_MAP = 0x8511
GL_OPERAND0_RGB = 0x8590
GL_SAMPLE_BUFFERS = 0x80A8
GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB
GL_TEXTURE4 = 0x84C4
GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
GL_TEXTURE0 = 0x84C0
GL_TEXTURE30 = 0x84DE
GL_TEXTURE24 = 0x84D8
GL_TEXTURE13 = 0x84CD
GL_TEXTURE9 = 0x84C9
GL_COMBINE = 0x8570

def init_gl_version_1_3():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glMultiTexCoord2i = gl_func( 'glMultiTexCoord2i', t.void, (t.GLenum, t.GLint, t.GLint))
    gl.glMultiTexCoord1f = gl_func( 'glMultiTexCoord1f', t.void, (t.GLenum, t.GLfloat))
    gl.glMultiTexCoord4fv = gl_func( 'glMultiTexCoord4fv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glSampleCoverage = gl_func( 'glSampleCoverage', t.void, (t.GLfloat, t.GLboolean))
    gl.glMultiTexCoord4f = gl_func( 'glMultiTexCoord4f', t.void, (t.GLenum, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glMultiTexCoord4sv = gl_func( 'glMultiTexCoord4sv', t.void, (t.GLenum, ct.POINTER(t.GLshort)))
    gl.glActiveTexture = gl_func( 'glActiveTexture', t.void, (t.GLenum,))
    gl.glCompressedTexSubImage3D = gl_func( 'glCompressedTexSubImage3D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glMultiTexCoord2iv = gl_func( 'glMultiTexCoord2iv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glMultiTexCoord2f = gl_func( 'glMultiTexCoord2f', t.void, (t.GLenum, t.GLfloat, t.GLfloat))
    gl.glMultiTexCoord1fv = gl_func( 'glMultiTexCoord1fv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glMultiTexCoord1dv = gl_func( 'glMultiTexCoord1dv', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glMultiTexCoord1i = gl_func( 'glMultiTexCoord1i', t.void, (t.GLenum, t.GLint))
    gl.glMultiTexCoord1sv = gl_func( 'glMultiTexCoord1sv', t.void, (t.GLenum, ct.POINTER(t.GLshort)))
    gl.glMultiTexCoord1iv = gl_func( 'glMultiTexCoord1iv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glMultiTexCoord4iv = gl_func( 'glMultiTexCoord4iv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glMultiTexCoord3i = gl_func( 'glMultiTexCoord3i', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint))
    gl.glCompressedTexImage3D = gl_func( 'glCompressedTexImage3D', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei, t.GLint, t.GLsizei, ct.POINTER(t.void)))
    gl.glCompressedTexImage1D = gl_func( 'glCompressedTexImage1D', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLsizei, t.GLint, t.GLsizei, ct.POINTER(t.void)))
    gl.glMultiTexCoord4d = gl_func( 'glMultiTexCoord4d', t.void, (t.GLenum, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glClientActiveTexture = gl_func( 'glClientActiveTexture', t.void, (t.GLenum,))
    gl.glCompressedTexSubImage2D = gl_func( 'glCompressedTexSubImage2D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glMultiTexCoord3sv = gl_func( 'glMultiTexCoord3sv', t.void, (t.GLenum, ct.POINTER(t.GLshort)))
    gl.glCompressedTexImage2D = gl_func( 'glCompressedTexImage2D', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLsizei, t.GLsizei, t.GLint, t.GLsizei, ct.POINTER(t.void)))
    gl.glMultiTexCoord2sv = gl_func( 'glMultiTexCoord2sv', t.void, (t.GLenum, ct.POINTER(t.GLshort)))
    gl.glMultiTexCoord3s = gl_func( 'glMultiTexCoord3s', t.void, (t.GLenum, t.GLshort, t.GLshort, t.GLshort))
    gl.glMultiTexCoord1s = gl_func( 'glMultiTexCoord1s', t.void, (t.GLenum, t.GLshort))
    gl.glMultiTexCoord3f = gl_func( 'glMultiTexCoord3f', t.void, (t.GLenum, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glMultiTexCoord3iv = gl_func( 'glMultiTexCoord3iv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glMultiTexCoord2d = gl_func( 'glMultiTexCoord2d', t.void, (t.GLenum, t.GLdouble, t.GLdouble))
    gl.glMultiTexCoord4i = gl_func( 'glMultiTexCoord4i', t.void, (t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glMultiTexCoord4s = gl_func( 'glMultiTexCoord4s', t.void, (t.GLenum, t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glLoadTransposeMatrixd = gl_func( 'glLoadTransposeMatrixd', t.void, (ct.POINTER(t.GLdouble),))
    gl.glMultiTexCoord2dv = gl_func( 'glMultiTexCoord2dv', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glMultTransposeMatrixd = gl_func( 'glMultTransposeMatrixd', t.void, (ct.POINTER(t.GLdouble),))
    gl.glMultiTexCoord3d = gl_func( 'glMultiTexCoord3d', t.void, (t.GLenum, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glMultiTexCoord3dv = gl_func( 'glMultiTexCoord3dv', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glCompressedTexSubImage1D = gl_func( 'glCompressedTexSubImage1D', t.void, (t.GLenum, t.GLint, t.GLint, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glMultiTexCoord4dv = gl_func( 'glMultiTexCoord4dv', t.void, (t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glMultTransposeMatrixf = gl_func( 'glMultTransposeMatrixf', t.void, (ct.POINTER(t.GLfloat),))
    gl.glGetCompressedTexImage = gl_func( 'glGetCompressedTexImage', t.void, (t.GLenum, t.GLint, ct.POINTER(t.void)))
    gl.glMultiTexCoord3fv = gl_func( 'glMultiTexCoord3fv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glMultiTexCoord2s = gl_func( 'glMultiTexCoord2s', t.void, (t.GLenum, t.GLshort, t.GLshort))
    gl.glMultiTexCoord2fv = gl_func( 'glMultiTexCoord2fv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glLoadTransposeMatrixf = gl_func( 'glLoadTransposeMatrixf', t.void, (ct.POINTER(t.GLfloat),))
    gl.glMultiTexCoord1d = gl_func( 'glMultiTexCoord1d', t.void, (t.GLenum, t.GLdouble))

#### GL VERSION 1.4 ####
GL_TEXTURE_COMPARE_FUNC = 0x884D
GL_DEPTH_TEXTURE_MODE = 0x884B
GL_MIRRORED_REPEAT = 0x8370
GL_CONSTANT_ALPHA = 0x8003
GL_POINT_FADE_THRESHOLD_SIZE = 0x8128
GL_FUNC_SUBTRACT = 0x800A
GL_TEXTURE_COMPARE_MODE = 0x884C
GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A
GL_DEPTH_COMPONENT16 = 0x81A5
GL_FOG_COORDINATE_SOURCE = 0x8450
GL_CURRENT_FOG_COORDINATE = 0x8453
GL_TEXTURE_FILTER_CONTROL = 0x8500
GL_MIN = 0x8007
GL_FUNC_REVERSE_SUBTRACT = 0x800B
GL_POINT_SIZE_MAX = 0x8127
GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456
GL_FUNC_ADD = 0x8006
GL_CONSTANT_COLOR = 0x8001
GL_FOG_COORDINATE = 0x8451
GL_BLEND_DST_ALPHA = 0x80CA
GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455
GL_BLEND_SRC_RGB = 0x80C9
GL_BLEND_DST_RGB = 0x80C8
GL_POINT_SIZE_MIN = 0x8126
GL_TEXTURE_DEPTH_SIZE = 0x884A
GL_FOG_COORDINATE_ARRAY = 0x8457
GL_GENERATE_MIPMAP = 0x8191
GL_MAX_TEXTURE_LOD_BIAS = 0x84FD
GL_POINT_DISTANCE_ATTENUATION = 0x8129
GL_TEXTURE_LOD_BIAS = 0x8501
GL_COLOR_SUM = 0x8458
GL_FRAGMENT_DEPTH = 0x8452
GL_BLEND_SRC_ALPHA = 0x80CB
GL_DEPTH_COMPONENT24 = 0x81A6
GL_GENERATE_MIPMAP_HINT = 0x8192
GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004
GL_SECONDARY_COLOR_ARRAY = 0x845E
GL_CURRENT_SECONDARY_COLOR = 0x8459
GL_MAX = 0x8008
GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B
GL_COMPARE_R_TO_TEXTURE = 0x884E
GL_ONE_MINUS_CONSTANT_COLOR = 0x8002
GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C
GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D
GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454
GL_DECR_WRAP = 0x8508
GL_INCR_WRAP = 0x8507
GL_DEPTH_COMPONENT32 = 0x81A7

def init_gl_version_1_4():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glSecondaryColor3f = gl_func( 'glSecondaryColor3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glSecondaryColor3b = gl_func( 'glSecondaryColor3b', t.void, (t.GLbyte, t.GLbyte, t.GLbyte))
    gl.glSecondaryColorPointer = gl_func( 'glSecondaryColorPointer', t.void, (t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glSecondaryColor3i = gl_func( 'glSecondaryColor3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glPointParameteri = gl_func( 'glPointParameteri', t.void, (t.GLenum, t.GLint))
    gl.glPointParameteriv = gl_func( 'glPointParameteriv', t.void, (t.GLenum, ct.POINTER(t.GLint)))
    gl.glSecondaryColor3us = gl_func( 'glSecondaryColor3us', t.void, (t.GLushort, t.GLushort, t.GLushort))
    gl.glMultiDrawArrays = gl_func( 'glMultiDrawArrays', t.void, (t.GLenum, ct.POINTER(t.GLint), ct.POINTER(t.GLsizei), t.GLsizei))
    gl.glFogCoordPointer = gl_func( 'glFogCoordPointer', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glWindowPos3f = gl_func( 'glWindowPos3f', t.void, (t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glFogCoordfv = gl_func( 'glFogCoordfv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glFogCoorddv = gl_func( 'glFogCoorddv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glFogCoordd = gl_func( 'glFogCoordd', t.void, (t.GLdouble,))
    gl.glSecondaryColor3ubv = gl_func( 'glSecondaryColor3ubv', t.void, (ct.POINTER(t.GLubyte),))
    gl.glWindowPos2s = gl_func( 'glWindowPos2s', t.void, (t.GLshort, t.GLshort))
    gl.glSecondaryColor3uiv = gl_func( 'glSecondaryColor3uiv', t.void, (ct.POINTER(t.GLuint),))
    gl.glWindowPos2f = gl_func( 'glWindowPos2f', t.void, (t.GLfloat, t.GLfloat))
    gl.glWindowPos3s = gl_func( 'glWindowPos3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glBlendFuncSeparate = gl_func( 'glBlendFuncSeparate', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLenum))
    gl.glPointParameterfv = gl_func( 'glPointParameterfv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glSecondaryColor3fv = gl_func( 'glSecondaryColor3fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glSecondaryColor3iv = gl_func( 'glSecondaryColor3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glWindowPos2sv = gl_func( 'glWindowPos2sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glSecondaryColor3d = gl_func( 'glSecondaryColor3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glWindowPos3i = gl_func( 'glWindowPos3i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glSecondaryColor3dv = gl_func( 'glSecondaryColor3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glWindowPos2d = gl_func( 'glWindowPos2d', t.void, (t.GLdouble, t.GLdouble))
    gl.glBlendEquation = gl_func( 'glBlendEquation', t.void, (t.GLenum,))
    gl.glBlendColor = gl_func( 'glBlendColor', t.void, (t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glWindowPos2dv = gl_func( 'glWindowPos2dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glSecondaryColor3bv = gl_func( 'glSecondaryColor3bv', t.void, (ct.POINTER(t.GLbyte),))
    gl.glSecondaryColor3ui = gl_func( 'glSecondaryColor3ui', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glWindowPos2iv = gl_func( 'glWindowPos2iv', t.void, (ct.POINTER(t.GLint),))
    gl.glWindowPos2fv = gl_func( 'glWindowPos2fv', t.void, (ct.POINTER(t.GLfloat),))
    gl.glWindowPos3sv = gl_func( 'glWindowPos3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glSecondaryColor3usv = gl_func( 'glSecondaryColor3usv', t.void, (ct.POINTER(t.GLushort),))
    gl.glWindowPos2i = gl_func( 'glWindowPos2i', t.void, (t.GLint, t.GLint))
    gl.glWindowPos3iv = gl_func( 'glWindowPos3iv', t.void, (ct.POINTER(t.GLint),))
    gl.glWindowPos3dv = gl_func( 'glWindowPos3dv', t.void, (ct.POINTER(t.GLdouble),))
    gl.glSecondaryColor3ub = gl_func( 'glSecondaryColor3ub', t.void, (t.GLubyte, t.GLubyte, t.GLubyte))
    gl.glSecondaryColor3s = gl_func( 'glSecondaryColor3s', t.void, (t.GLshort, t.GLshort, t.GLshort))
    gl.glMultiDrawElements = gl_func( 'glMultiDrawElements', t.void, (t.GLenum, ct.POINTER(t.GLsizei), t.GLenum, ct.POINTER(ct.POINTER(t.void)), t.GLsizei))
    gl.glSecondaryColor3sv = gl_func( 'glSecondaryColor3sv', t.void, (ct.POINTER(t.GLshort),))
    gl.glWindowPos3d = gl_func( 'glWindowPos3d', t.void, (t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glFogCoordf = gl_func( 'glFogCoordf', t.void, (t.GLfloat,))
    gl.glPointParameterf = gl_func( 'glPointParameterf', t.void, (t.GLenum, t.GLfloat))
    gl.glWindowPos3fv = gl_func( 'glWindowPos3fv', t.void, (ct.POINTER(t.GLfloat),))

#### GL VERSION 1.5 ####
GL_WRITE_ONLY = 0x88B9
GL_BUFFER_MAP_POINTER = 0x88BD
GL_BUFFER_MAPPED = 0x88BC
GL_DYNAMIC_COPY = 0x88EA
GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898
GL_FOG_COORD_ARRAY_POINTER = 0x8456
GL_STREAM_READ = 0x88E1
GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D
GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
GL_STATIC_READ = 0x88E5
GL_SRC2_RGB = 0x8582
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D
GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896
GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899
GL_SRC0_ALPHA = 0x8588
GL_ELEMENT_ARRAY_BUFFER = 0x8893
GL_READ_WRITE = 0x88BA
GL_SRC1_ALPHA = 0x8589
GL_BUFFER_SIZE = 0x8764
GL_FOG_COORD_SRC = 0x8450
GL_DYNAMIC_DRAW = 0x88E8
GL_FOG_COORD_ARRAY_TYPE = 0x8454
GL_QUERY_COUNTER_BITS = 0x8864
GL_FOG_COORD_ARRAY_STRIDE = 0x8455
GL_STREAM_COPY = 0x88E2
GL_BUFFER_USAGE = 0x8765
GL_SRC1_RGB = 0x8581
GL_SAMPLES_PASSED = 0x8914
GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E
GL_ARRAY_BUFFER_BINDING = 0x8894
GL_CURRENT_QUERY = 0x8865
GL_READ_ONLY = 0x88B8
GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C
GL_STATIC_COPY = 0x88E6
GL_STREAM_DRAW = 0x88E0
GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897
GL_ARRAY_BUFFER = 0x8892
GL_DYNAMIC_READ = 0x88E9
GL_FOG_COORD_ARRAY = 0x8457
GL_QUERY_RESULT_AVAILABLE = 0x8867
GL_FOG_COORD = 0x8451
GL_CURRENT_FOG_COORD = 0x8453
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
GL_SRC2_ALPHA = 0x858A
GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B
GL_STATIC_DRAW = 0x88E4
GL_SRC0_RGB = 0x8580
GL_BUFFER_ACCESS = 0x88BB
GL_QUERY_RESULT = 0x8866
GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A

def init_gl_version_1_5():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glBufferData = gl_func( 'glBufferData', t.void, (t.GLenum, t.GLsizeiptr, ct.POINTER(t.void), t.GLenum))
    gl.glGetQueryObjectiv = gl_func( 'glGetQueryObjectiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBufferSubData = gl_func( 'glBufferSubData', t.void, (t.GLenum, t.GLintptr, t.GLsizeiptr, ct.POINTER(t.void)))
    gl.glGetQueryiv = gl_func( 'glGetQueryiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetQueryObjectuiv = gl_func( 'glGetQueryObjectuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glIsQuery = gl_func( 'glIsQuery', t.GLboolean, (t.GLuint,))
    gl.glBindBuffer = gl_func( 'glBindBuffer', t.void, (t.GLenum, t.GLuint))
    gl.glUnmapBuffer = gl_func( 'glUnmapBuffer', t.GLboolean, (t.GLenum,))
    gl.glGetBufferParameteriv = gl_func( 'glGetBufferParameteriv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetBufferPointerv = gl_func( 'glGetBufferPointerv', t.void, (t.GLenum, t.GLenum, ct.POINTER(ct.POINTER(t.void))))
    gl.glGenQueries = gl_func( 'glGenQueries', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBeginQuery = gl_func( 'glBeginQuery', t.void, (t.GLenum, t.GLuint))
    gl.glGetBufferSubData = gl_func( 'glGetBufferSubData', t.void, (t.GLenum, t.GLintptr, t.GLsizeiptr, ct.POINTER(t.void)))
    gl.glEndQuery = gl_func( 'glEndQuery', t.void, (t.GLenum,))
    gl.glIsBuffer = gl_func( 'glIsBuffer', t.GLboolean, (t.GLuint,))
    gl.glGenBuffers = gl_func( 'glGenBuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glMapBuffer = gl_func( 'glMapBuffer', ct.POINTER(t.void), (t.GLenum, t.GLenum))
    gl.glDeleteQueries = gl_func( 'glDeleteQueries', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glDeleteBuffers = gl_func( 'glDeleteBuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))

#### GL VERSION 2.0 ####
GL_INT_VEC4 = 0x8B55
GL_FLOAT_VEC4 = 0x8B52
GL_DRAW_BUFFER11 = 0x8830
GL_VALIDATE_STATUS = 0x8B83
GL_BOOL_VEC4 = 0x8B59
GL_VERTEX_SHADER = 0x8B31
GL_COORD_REPLACE = 0x8862
GL_DRAW_BUFFER13 = 0x8832
GL_ACTIVE_UNIFORMS = 0x8B86
GL_SHADER_TYPE = 0x8B4F
GL_CURRENT_PROGRAM = 0x8B8D
GL_BOOL_VEC2 = 0x8B57
GL_DRAW_BUFFER2 = 0x8827
GL_FLOAT_MAT3 = 0x8B5B
GL_POINT_SPRITE = 0x8861
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
GL_ATTACHED_SHADERS = 0x8B85
GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
GL_BOOL_VEC3 = 0x8B58
GL_SAMPLER_CUBE = 0x8B60
GL_DRAW_BUFFER8 = 0x882D
GL_INT_VEC2 = 0x8B53
GL_DRAW_BUFFER9 = 0x882E
GL_DRAW_BUFFER15 = 0x8834
GL_SHADER_SOURCE_LENGTH = 0x8B88
GL_STENCIL_BACK_WRITEMASK = 0x8CA5
GL_MAX_VARYING_FLOATS = 0x8B4B
GL_STENCIL_BACK_REF = 0x8CA3
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
GL_FLOAT_VEC3 = 0x8B51
GL_FLOAT_MAT2 = 0x8B5A
GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872
GL_DRAW_BUFFER4 = 0x8829
GL_CURRENT_VERTEX_ATTRIB = 0x8626
GL_INFO_LOG_LENGTH = 0x8B84
GL_SAMPLER_1D = 0x8B5D
GL_DRAW_BUFFER10 = 0x882F
GL_MAX_VERTEX_ATTRIBS = 0x8869
GL_SAMPLER_1D_SHADOW = 0x8B61
GL_LOWER_LEFT = 0x8CA1
GL_DELETE_STATUS = 0x8B80
GL_DRAW_BUFFER3 = 0x8828
GL_DRAW_BUFFER1 = 0x8826
GL_BLEND_EQUATION_RGB = 0x8009
GL_STENCIL_BACK_VALUE_MASK = 0x8CA4
GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
GL_MAX_DRAW_BUFFERS = 0x8824
GL_STENCIL_BACK_FUNC = 0x8800
GL_LINK_STATUS = 0x8B82
GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
GL_SAMPLER_2D_SHADOW = 0x8B62
GL_MAX_TEXTURE_COORDS = 0x8871
GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0
GL_FLOAT_VEC2 = 0x8B50
GL_DRAW_BUFFER5 = 0x882A
GL_BOOL = 0x8B56
GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
GL_SHADING_LANGUAGE_VERSION = 0x8B8C
GL_DRAW_BUFFER6 = 0x882B
GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643
GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
GL_COMPILE_STATUS = 0x8B81
GL_DRAW_BUFFER7 = 0x882C
GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642
GL_STENCIL_BACK_FAIL = 0x8801
GL_DRAW_BUFFER0 = 0x8825
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
GL_ACTIVE_ATTRIBUTES = 0x8B89
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
GL_SAMPLER_3D = 0x8B5F
GL_SAMPLER_2D = 0x8B5E
GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
GL_FLOAT_MAT4 = 0x8B5C
GL_UPPER_LEFT = 0x8CA2
GL_DRAW_BUFFER14 = 0x8833
GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
GL_FRAGMENT_SHADER = 0x8B30
GL_DRAW_BUFFER12 = 0x8831
GL_INT_VEC3 = 0x8B54
GL_BLEND_EQUATION_ALPHA = 0x883D

def init_gl_version_2_0():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glDrawBuffers = gl_func( 'glDrawBuffers', t.void, (t.GLsizei, ct.POINTER(t.GLenum)))
    gl.glVertexAttrib4Niv = gl_func( 'glVertexAttrib4Niv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glUniform3fv = gl_func( 'glUniform3fv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glGetShaderSource = gl_func( 'glGetShaderSource', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glUniform1f = gl_func( 'glUniform1f', t.void, (t.GLint, t.GLfloat))
    gl.glUniformMatrix4fv = gl_func( 'glUniformMatrix4fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glAttachShader = gl_func( 'glAttachShader', t.void, (t.GLuint, t.GLuint))
    gl.glGetActiveAttrib = gl_func( 'glGetActiveAttrib', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLint), ct.POINTER(t.GLenum), ct.POINTER(t.GLchar)))
    gl.glVertexAttrib4Nsv = gl_func( 'glVertexAttrib4Nsv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glUniform4fv = gl_func( 'glUniform4fv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glEnableVertexAttribArray = gl_func( 'glEnableVertexAttribArray', t.void, (t.GLuint,))
    gl.glStencilMaskSeparate = gl_func( 'glStencilMaskSeparate', t.void, (t.GLenum, t.GLuint))
    gl.glGetAttribLocation = gl_func( 'glGetAttribLocation', t.GLint, (t.GLuint, ct.POINTER(t.GLchar)))
    gl.glUniform2iv = gl_func( 'glUniform2iv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glVertexAttrib4iv = gl_func( 'glVertexAttrib4iv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glVertexAttrib4Nbv = gl_func( 'glVertexAttrib4Nbv', t.void, (t.GLuint, ct.POINTER(t.GLbyte)))
    gl.glVertexAttrib2dv = gl_func( 'glVertexAttrib2dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glStencilFuncSeparate = gl_func( 'glStencilFuncSeparate', t.void, (t.GLenum, t.GLenum, t.GLint, t.GLuint))
    gl.glVertexAttrib2d = gl_func( 'glVertexAttrib2d', t.void, (t.GLuint, t.GLdouble, t.GLdouble))
    gl.glVertexAttrib4sv = gl_func( 'glVertexAttrib4sv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glGetUniformiv = gl_func( 'glGetUniformiv', t.void, (t.GLuint, t.GLint, ct.POINTER(t.GLint)))
    gl.glUniform3f = gl_func( 'glUniform3f', t.void, (t.GLint, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glGetProgramiv = gl_func( 'glGetProgramiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glUniform4f = gl_func( 'glUniform4f', t.void, (t.GLint, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glGetUniformLocation = gl_func( 'glGetUniformLocation', t.GLint, (t.GLuint, ct.POINTER(t.GLchar)))
    gl.glIsShader = gl_func( 'glIsShader', t.GLboolean, (t.GLuint,))
    gl.glVertexAttrib2f = gl_func( 'glVertexAttrib2f', t.void, (t.GLuint, t.GLfloat, t.GLfloat))
    gl.glVertexAttrib4Nubv = gl_func( 'glVertexAttrib4Nubv', t.void, (t.GLuint, ct.POINTER(t.GLubyte)))
    gl.glGetVertexAttribiv = gl_func( 'glGetVertexAttribiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glCreateProgram = gl_func( 'glCreateProgram', t.GLuint, ())
    gl.glBindAttribLocation = gl_func( 'glBindAttribLocation', t.void, (t.GLuint, t.GLuint, ct.POINTER(t.GLchar)))
    gl.glVertexAttrib3sv = gl_func( 'glVertexAttrib3sv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glGetVertexAttribdv = gl_func( 'glGetVertexAttribdv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glVertexAttrib4usv = gl_func( 'glVertexAttrib4usv', t.void, (t.GLuint, ct.POINTER(t.GLushort)))
    gl.glVertexAttrib3f = gl_func( 'glVertexAttrib3f', t.void, (t.GLuint, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glCreateShader = gl_func( 'glCreateShader', t.GLuint, (t.GLenum,))
    gl.glUniform1fv = gl_func( 'glUniform1fv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glVertexAttrib1fv = gl_func( 'glVertexAttrib1fv', t.void, (t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glVertexAttrib3s = gl_func( 'glVertexAttrib3s', t.void, (t.GLuint, t.GLshort, t.GLshort, t.GLshort))
    gl.glVertexAttrib4bv = gl_func( 'glVertexAttrib4bv', t.void, (t.GLuint, ct.POINTER(t.GLbyte)))
    gl.glUniform1iv = gl_func( 'glUniform1iv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glGetAttachedShaders = gl_func( 'glGetAttachedShaders', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLuint)))
    gl.glIsProgram = gl_func( 'glIsProgram', t.GLboolean, (t.GLuint,))
    gl.glVertexAttrib2sv = gl_func( 'glVertexAttrib2sv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glVertexAttrib1dv = gl_func( 'glVertexAttrib1dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glVertexAttrib1sv = gl_func( 'glVertexAttrib1sv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glVertexAttrib4f = gl_func( 'glVertexAttrib4f', t.void, (t.GLuint, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glCompileShader = gl_func( 'glCompileShader', t.void, (t.GLuint,))
    gl.glVertexAttrib1d = gl_func( 'glVertexAttrib1d', t.void, (t.GLuint, t.GLdouble))
    gl.glUniform2f = gl_func( 'glUniform2f', t.void, (t.GLint, t.GLfloat, t.GLfloat))
    gl.glValidateProgram = gl_func( 'glValidateProgram', t.void, (t.GLuint,))
    gl.glShaderSource = gl_func( 'glShaderSource', t.void, (t.GLuint, t.GLsizei, ct.POINTER(ct.POINTER(t.GLchar)), ct.POINTER(t.GLint)))
    gl.glVertexAttrib2s = gl_func( 'glVertexAttrib2s', t.void, (t.GLuint, t.GLshort, t.GLshort))
    gl.glDeleteShader = gl_func( 'glDeleteShader', t.void, (t.GLuint,))
    gl.glVertexAttrib3dv = gl_func( 'glVertexAttrib3dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glVertexAttrib3fv = gl_func( 'glVertexAttrib3fv', t.void, (t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glVertexAttrib1f = gl_func( 'glVertexAttrib1f', t.void, (t.GLuint, t.GLfloat))
    gl.glGetShaderiv = gl_func( 'glGetShaderiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glDisableVertexAttribArray = gl_func( 'glDisableVertexAttribArray', t.void, (t.GLuint,))
    gl.glDeleteProgram = gl_func( 'glDeleteProgram', t.void, (t.GLuint,))
    gl.glUniform3i = gl_func( 'glUniform3i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glVertexAttrib4Nusv = gl_func( 'glVertexAttrib4Nusv', t.void, (t.GLuint, ct.POINTER(t.GLushort)))
    gl.glVertexAttrib4uiv = gl_func( 'glVertexAttrib4uiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glGetProgramInfoLog = gl_func( 'glGetProgramInfoLog', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glUniform4iv = gl_func( 'glUniform4iv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glVertexAttrib1s = gl_func( 'glVertexAttrib1s', t.void, (t.GLuint, t.GLshort))
    gl.glVertexAttrib2fv = gl_func( 'glVertexAttrib2fv', t.void, (t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glBlendEquationSeparate = gl_func( 'glBlendEquationSeparate', t.void, (t.GLenum, t.GLenum))
    gl.glUniform3iv = gl_func( 'glUniform3iv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glUniform2i = gl_func( 'glUniform2i', t.void, (t.GLint, t.GLint, t.GLint))
    gl.glGetUniformfv = gl_func( 'glGetUniformfv', t.void, (t.GLuint, t.GLint, ct.POINTER(t.GLfloat)))
    gl.glUniform4i = gl_func( 'glUniform4i', t.void, (t.GLint, t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glVertexAttrib4dv = gl_func( 'glVertexAttrib4dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glGetActiveUniform = gl_func( 'glGetActiveUniform', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLint), ct.POINTER(t.GLenum), ct.POINTER(t.GLchar)))
    gl.glVertexAttrib4s = gl_func( 'glVertexAttrib4s', t.void, (t.GLuint, t.GLshort, t.GLshort, t.GLshort, t.GLshort))
    gl.glVertexAttrib4Nuiv = gl_func( 'glVertexAttrib4Nuiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glVertexAttribPointer = gl_func( 'glVertexAttribPointer', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLboolean, t.GLsizei, ct.POINTER(t.void)))
    gl.glGetShaderInfoLog = gl_func( 'glGetShaderInfoLog', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glDetachShader = gl_func( 'glDetachShader', t.void, (t.GLuint, t.GLuint))
    gl.glUniform1i = gl_func( 'glUniform1i', t.void, (t.GLint, t.GLint))
    gl.glUniformMatrix2fv = gl_func( 'glUniformMatrix2fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix3fv = gl_func( 'glUniformMatrix3fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glVertexAttrib3d = gl_func( 'glVertexAttrib3d', t.void, (t.GLuint, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glUseProgram = gl_func( 'glUseProgram', t.void, (t.GLuint,))
    gl.glVertexAttrib4d = gl_func( 'glVertexAttrib4d', t.void, (t.GLuint, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glVertexAttrib4Nub = gl_func( 'glVertexAttrib4Nub', t.void, (t.GLuint, t.GLubyte, t.GLubyte, t.GLubyte, t.GLubyte))
    gl.glUniform2fv = gl_func( 'glUniform2fv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glLinkProgram = gl_func( 'glLinkProgram', t.void, (t.GLuint,))
    gl.glGetVertexAttribPointerv = gl_func( 'glGetVertexAttribPointerv', t.void, (t.GLuint, t.GLenum, ct.POINTER(ct.POINTER(t.void))))
    gl.glVertexAttrib4fv = gl_func( 'glVertexAttrib4fv', t.void, (t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glStencilOpSeparate = gl_func( 'glStencilOpSeparate', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLenum))
    gl.glGetVertexAttribfv = gl_func( 'glGetVertexAttribfv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glVertexAttrib4ubv = gl_func( 'glVertexAttrib4ubv', t.void, (t.GLuint, ct.POINTER(t.GLubyte)))

#### GL VERSION 2.1 ####
GL_SRGB = 0x8C40
GL_FLOAT_MAT4x2 = 0x8B69
GL_FLOAT_MAT3x2 = 0x8B67
GL_SLUMINANCE8 = 0x8C47
GL_SLUMINANCE8_ALPHA8 = 0x8C45
GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED
GL_SRGB8 = 0x8C41
GL_COMPRESSED_SLUMINANCE = 0x8C4A
GL_FLOAT_MAT2x4 = 0x8B66
GL_FLOAT_MAT2x3 = 0x8B65
GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F
GL_COMPRESSED_SRGB_ALPHA = 0x8C49
GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B
GL_SLUMINANCE = 0x8C46
GL_PIXEL_PACK_BUFFER = 0x88EB
GL_FLOAT_MAT4x3 = 0x8B6A
GL_SRGB8_ALPHA8 = 0x8C43
GL_PIXEL_UNPACK_BUFFER = 0x88EC
GL_SRGB_ALPHA = 0x8C42
GL_COMPRESSED_SRGB = 0x8C48
GL_FLOAT_MAT3x4 = 0x8B68
GL_SLUMINANCE_ALPHA = 0x8C44
GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF

def init_gl_version_2_1():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glUniformMatrix3x2fv = gl_func( 'glUniformMatrix3x2fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix3x4fv = gl_func( 'glUniformMatrix3x4fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix4x3fv = gl_func( 'glUniformMatrix4x3fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix4x2fv = gl_func( 'glUniformMatrix4x2fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix2x3fv = gl_func( 'glUniformMatrix2x3fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glUniformMatrix2x4fv = gl_func( 'glUniformMatrix2x4fv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))

#### GL VERSION 3.0 ####
GL_RGBA32UI = 0x8D70
GL_TEXTURE_RED_TYPE = 0x8C10
GL_TEXTURE_DEPTH_TYPE = 0x8C16
GL_GREEN_INTEGER = 0x8D95
GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6
GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD
GL_COMPRESSED_RG = 0x8226
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216
GL_R32UI = 0x8236
GL_RGBA8UI = 0x8D7C
GL_COMPRESSED_RED = 0x8225
GL_FRAMEBUFFER_SRGB = 0x8DB9
GL_SAMPLER_2D_ARRAY = 0x8DC1
GL_CLIP_DISTANCE5 = 0x3005
GL_HALF_FLOAT = 0x140B
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
GL_MAX_VARYING_COMPONENTS = 0x8B4B
GL_DEPTH_COMPONENT32F = 0x8CAC
GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
GL_INT_SAMPLER_3D = 0x8DCB
GL_INT_SAMPLER_2D = 0x8DCA
GL_MAP_READ_BIT = 0x0001
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
GL_COLOR_ATTACHMENT21 = 0x8CF5
GL_STENCIL_INDEX4 = 0x8D47
GL_R16I = 0x8233
GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506
GL_TEXTURE_BLUE_TYPE = 0x8C12
GL_RGB32UI = 0x8D71
GL_QUERY_NO_WAIT = 0x8E14
GL_MINOR_VERSION = 0x821C
GL_INT_SAMPLER_2D_ARRAY = 0x8DCF
GL_BUFFER_ACCESS_FLAGS = 0x911F
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88
GL_RG32F = 0x8230
GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010
GL_COMPRESSED_RG_RGTC2 = 0x8DBD
GL_RG16F = 0x822F
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217
GL_R16F = 0x822D
GL_UNSIGNED_INT_VEC2 = 0x8DC6
GL_COLOR_ATTACHMENT31 = 0x8CFF
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215
GL_FRAMEBUFFER = 0x8D40
GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E
GL_RED_INTEGER = 0x8D94
GL_CLIP_DISTANCE6 = 0x3006
GL_COLOR_ATTACHMENT30 = 0x8CFE
GL_COLOR_ATTACHMENT11 = 0x8CEB
GL_COLOR_ATTACHMENT3 = 0x8CE3
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7
GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83
GL_R32F = 0x822E
GL_R8I = 0x8231
GL_STENCIL_INDEX1 = 0x8D46
GL_RG32I = 0x823B
GL_COLOR_ATTACHMENT22 = 0x8CF6
GL_DRAW_FRAMEBUFFER = 0x8CA9
GL_COLOR_ATTACHMENT6 = 0x8CE6
GL_QUERY_WAIT = 0x8E13
GL_MAP_UNSYNCHRONIZED_BIT = 0x0020
GL_TEXTURE_SHARED_SIZE = 0x8C3F
GL_TEXTURE_GREEN_TYPE = 0x8C11
GL_RGBA_INTEGER = 0x8D99
GL_COLOR_ATTACHMENT18 = 0x8CF2
GL_RGB16F = 0x881B
GL_BLUE_INTEGER = 0x8D96
GL_COLOR_ATTACHMENT2 = 0x8CE2
GL_UNSIGNED_INT_24_8 = 0x84FA
GL_COLOR_ATTACHMENT29 = 0x8CFD
GL_COLOR_ATTACHMENT8 = 0x8CE8
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212
GL_RENDERBUFFER_SAMPLES = 0x8CAB
GL_STENCIL_INDEX8 = 0x8D48
GL_CLIP_DISTANCE3 = 0x3003
GL_RGB8UI = 0x8D7D
GL_UNSIGNED_NORMALIZED = 0x8C17
GL_COLOR_ATTACHMENT12 = 0x8CEC
GL_COLOR_ATTACHMENT5 = 0x8CE5
GL_COLOR_ATTACHMENT4 = 0x8CE4
GL_RENDERBUFFER_BLUE_SIZE = 0x8D52
GL_RGBA16UI = 0x8D76
GL_RENDERBUFFER_WIDTH = 0x8D42
GL_RG_INTEGER = 0x8228
GL_COLOR_ATTACHMENT20 = 0x8CF4
GL_COLOR_ATTACHMENT0 = 0x8CE0
GL_UNSIGNED_INT_VEC3 = 0x8DC7
GL_RENDERBUFFER_BINDING = 0x8CA7
GL_COLOR_ATTACHMENT24 = 0x8CF8
GL_RGB_INTEGER = 0x8D98
GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D
GL_RGBA16F = 0x881A
GL_PRIMITIVES_GENERATED = 0x8C87
GL_RG16UI = 0x823A
GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B
GL_BGR_INTEGER = 0x8D9A
GL_COLOR_ATTACHMENT25 = 0x8CF9
GL_R11F_G11F_B10F = 0x8C3A
GL_CLIP_DISTANCE1 = 0x3001
GL_MAJOR_VERSION = 0x821B
GL_BGRA_INTEGER = 0x8D9B
GL_QUERY_BY_REGION_WAIT = 0x8E15
GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3
GL_RG8UI = 0x8238
GL_DEPTH24_STENCIL8 = 0x88F0
GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213
GL_RGB16I = 0x8D89
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB
GL_FRAMEBUFFER_DEFAULT = 0x8218
GL_MAX_CLIP_DISTANCES = 0x0D32
GL_INT_SAMPLER_1D = 0x8DC9
GL_DEPTH_ATTACHMENT = 0x8D00
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56
GL_SEPARATE_ATTRIBS = 0x8C8D
GL_CLIP_DISTANCE7 = 0x3007
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
GL_RGB9_E5 = 0x8C3D
GL_INT_SAMPLER_CUBE = 0x8DCC
GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE
GL_RASTERIZER_DISCARD = 0x8C89
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211
GL_COLOR_ATTACHMENT7 = 0x8CE7
GL_MAP_INVALIDATE_RANGE_BIT = 0x0004
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6
GL_RGBA16I = 0x8D88
GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F
GL_R8UI = 0x8232
GL_ALPHA_INTEGER = 0x8D97
GL_COLOR_ATTACHMENT27 = 0x8CFB
GL_RENDERBUFFER = 0x8D41
GL_COLOR_ATTACHMENT17 = 0x8CF1
GL_MAX_SAMPLES = 0x8D57
GL_R16UI = 0x8234
GL_RENDERBUFFER_RED_SIZE = 0x8D50
GL_UNSIGNED_INT_VEC4 = 0x8DC8
GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905
GL_COMPRESSED_RED_RGTC1 = 0x8DBB
GL_DEPTH_STENCIL = 0x84F9
GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
GL_INTERLEAVED_ATTRIBS = 0x8C8C
GL_STENCIL_ATTACHMENT = 0x8D20
GL_CLIP_DISTANCE4 = 0x3004
GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3
GL_COLOR_ATTACHMENT15 = 0x8CEF
GL_R32I = 0x8235
GL_RENDERBUFFER_GREEN_SIZE = 0x8D51
GL_MAP_WRITE_BIT = 0x0002
GL_RGBA32I = 0x8D82
GL_NUM_EXTENSIONS = 0x821D
GL_FRAMEBUFFER_BINDING = 0x8CA6
GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008
GL_RGB16UI = 0x8D77
GL_BUFFER_MAP_LENGTH = 0x9120
GL_TEXTURE_STENCIL_SIZE = 0x88F1
GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B
GL_MAX_RENDERBUFFER_SIZE = 0x84E8
GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF
GL_RG = 0x8227
GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1
GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55
GL_COLOR_ATTACHMENT19 = 0x8CF3
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210
GL_R8 = 0x8229
GL_RG8I = 0x8237
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001
GL_TEXTURE_1D_ARRAY = 0x8C18
GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54
GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84
GL_VERTEX_ARRAY_BINDING = 0x85B5
GL_COLOR_ATTACHMENT14 = 0x8CEE
GL_RG8 = 0x822B
GL_RG16 = 0x822C
GL_RG16I = 0x8239
GL_FIXED_ONLY = 0x891D
GL_SAMPLER_CUBE_SHADOW = 0x8DC5
GL_READ_FRAMEBUFFER_BINDING = 0x8CAA
GL_COLOR_ATTACHMENT10 = 0x8CEA
GL_COLOR_ATTACHMENT28 = 0x8CFC
GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E
GL_FRAMEBUFFER_UNDEFINED = 0x8219
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B
GL_READ_FRAMEBUFFER = 0x8CA8
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214
GL_RGBA32F = 0x8814
GL_QUERY_BY_REGION_NO_WAIT = 0x8E16
GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4
GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4
GL_COLOR_ATTACHMENT16 = 0x8CF0
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A
GL_DEPTH_STENCIL_ATTACHMENT = 0x821A
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
GL_COLOR_ATTACHMENT23 = 0x8CF7
GL_CLAMP_FRAGMENT_COLOR = 0x891B
GL_COLOR_ATTACHMENT1 = 0x8CE1
GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC
GL_CLAMP_READ_COLOR = 0x891C
GL_STENCIL_INDEX16 = 0x8D49
GL_INT_SAMPLER_1D_ARRAY = 0x8DCE
GL_DEPTH32F_STENCIL8 = 0x8CAD
GL_CLIP_DISTANCE2 = 0x3002
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76
GL_RGB8I = 0x8D8F
GL_FRAMEBUFFER_COMPLETE = 0x8CD5
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC
GL_RG32UI = 0x823C
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
GL_RENDERBUFFER_HEIGHT = 0x8D43
GL_SAMPLER_1D_ARRAY = 0x8DC0
GL_RGB32F = 0x8815
GL_MAX_COLOR_ATTACHMENTS = 0x8CDF
GL_CLAMP_VERTEX_COLOR = 0x891A
GL_CONTEXT_FLAGS = 0x821E
GL_COLOR_ATTACHMENT26 = 0x8CFA
GL_TEXTURE_ALPHA_TYPE = 0x8C13
GL_CLIP_DISTANCE0 = 0x3000
GL_COLOR_ATTACHMENT13 = 0x8CED
GL_COLOR_ATTACHMENT9 = 0x8CE9
GL_R16 = 0x822A
GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19
GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4
GL_COMPARE_REF_TO_TEXTURE = 0x884E
GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD
GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD
GL_RGBA8I = 0x8D8E
GL_BUFFER_MAP_OFFSET = 0x9121
GL_TEXTURE_2D_ARRAY = 0x8C1A
GL_RGB32I = 0x8D83
GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53

def init_gl_version_3_0():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glMapBufferRange = gl_func( 'glMapBufferRange', ct.POINTER(t.void), (t.GLenum, t.GLintptr, t.GLsizeiptr, t.GLbitfield))
    gl.glVertexAttribI1i = gl_func( 'glVertexAttribI1i', t.void, (t.GLuint, t.GLint))
    gl.glVertexAttribI3uiv = gl_func( 'glVertexAttribI3uiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glDeleteFramebuffers = gl_func( 'glDeleteFramebuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGetBooleani_v = gl_func( 'glGetBooleani_v', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLboolean)))
    gl.glVertexAttribI2i = gl_func( 'glVertexAttribI2i', t.void, (t.GLuint, t.GLint, t.GLint))
    gl.glVertexAttribI2ui = gl_func( 'glVertexAttribI2ui', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glGetTexParameterIuiv = gl_func( 'glGetTexParameterIuiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glUniform4uiv = gl_func( 'glUniform4uiv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glUniform3ui = gl_func( 'glUniform3ui', t.void, (t.GLint, t.GLuint, t.GLuint, t.GLuint))
    gl.glUniform1uiv = gl_func( 'glUniform1uiv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glUniform3uiv = gl_func( 'glUniform3uiv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glVertexAttribI4sv = gl_func( 'glVertexAttribI4sv', t.void, (t.GLuint, ct.POINTER(t.GLshort)))
    gl.glVertexAttribI4ui = gl_func( 'glVertexAttribI4ui', t.void, (t.GLuint, t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glVertexAttribI4bv = gl_func( 'glVertexAttribI4bv', t.void, (t.GLuint, ct.POINTER(t.GLbyte)))
    gl.glVertexAttribI4usv = gl_func( 'glVertexAttribI4usv', t.void, (t.GLuint, ct.POINTER(t.GLushort)))
    gl.glGetRenderbufferParameteriv = gl_func( 'glGetRenderbufferParameteriv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetFramebufferAttachmentParameteriv = gl_func( 'glGetFramebufferAttachmentParameteriv', t.void, (t.GLenum, t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glFramebufferTexture3D = gl_func( 'glFramebufferTexture3D', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLuint, t.GLint, t.GLint))
    gl.glBeginTransformFeedback = gl_func( 'glBeginTransformFeedback', t.void, (t.GLenum,))
    gl.glVertexAttribI1uiv = gl_func( 'glVertexAttribI1uiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glGetStringi = gl_func( 'glGetStringi', ct.POINTER(t.GLubyte), (t.GLenum, t.GLuint))
    gl.glUniform1ui = gl_func( 'glUniform1ui', t.void, (t.GLint, t.GLuint))
    gl.glFramebufferTexture2D = gl_func( 'glFramebufferTexture2D', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLuint, t.GLint))
    gl.glVertexAttribI3ui = gl_func( 'glVertexAttribI3ui', t.void, (t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glDisablei = gl_func( 'glDisablei', t.void, (t.GLenum, t.GLuint))
    gl.glCheckFramebufferStatus = gl_func( 'glCheckFramebufferStatus', t.GLenum, (t.GLenum,))
    gl.glGenerateMipmap = gl_func( 'glGenerateMipmap', t.void, (t.GLenum,))
    gl.glBindFramebuffer = gl_func( 'glBindFramebuffer', t.void, (t.GLenum, t.GLuint))
    gl.glVertexAttribI4ubv = gl_func( 'glVertexAttribI4ubv', t.void, (t.GLuint, ct.POINTER(t.GLubyte)))
    gl.glVertexAttribIPointer = gl_func( 'glVertexAttribIPointer', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glIsEnabledi = gl_func( 'glIsEnabledi', t.GLboolean, (t.GLenum, t.GLuint))
    gl.glBindVertexArray = gl_func( 'glBindVertexArray', t.void, (t.GLuint,))
    gl.glVertexAttribI1iv = gl_func( 'glVertexAttribI1iv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glEnablei = gl_func( 'glEnablei', t.void, (t.GLenum, t.GLuint))
    gl.glVertexAttribI1ui = gl_func( 'glVertexAttribI1ui', t.void, (t.GLuint, t.GLuint))
    gl.glGetTransformFeedbackVarying = gl_func( 'glGetTransformFeedbackVarying', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLsizei), ct.POINTER(t.GLenum), ct.POINTER(t.GLchar)))
    gl.glIsRenderbuffer = gl_func( 'glIsRenderbuffer', t.GLboolean, (t.GLuint,))
    gl.glGetIntegeri_v = gl_func( 'glGetIntegeri_v', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLint)))
    gl.glTransformFeedbackVaryings = gl_func( 'glTransformFeedbackVaryings', t.void, (t.GLuint, t.GLsizei, ct.POINTER(ct.POINTER(t.GLchar)), t.GLenum))
    gl.glUniform4ui = gl_func( 'glUniform4ui', t.void, (t.GLint, t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glVertexAttribI2iv = gl_func( 'glVertexAttribI2iv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glRenderbufferStorage = gl_func( 'glRenderbufferStorage', t.void, (t.GLenum, t.GLenum, t.GLsizei, t.GLsizei))
    gl.glIsVertexArray = gl_func( 'glIsVertexArray', t.GLboolean, (t.GLuint,))
    gl.glClearBufferuiv = gl_func( 'glClearBufferuiv', t.void, (t.GLenum, t.GLint, ct.POINTER(t.GLuint)))
    gl.glGetFragDataLocation = gl_func( 'glGetFragDataLocation', t.GLint, (t.GLuint, ct.POINTER(t.GLchar)))
    gl.glClearBufferfi = gl_func( 'glClearBufferfi', t.void, (t.GLenum, t.GLint, t.GLfloat, t.GLint))
    gl.glEndTransformFeedback = gl_func( 'glEndTransformFeedback', t.void, ())
    gl.glGenVertexArrays = gl_func( 'glGenVertexArrays', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBindBufferRange = gl_func( 'glBindBufferRange', t.void, (t.GLenum, t.GLuint, t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glBlitFramebuffer = gl_func( 'glBlitFramebuffer', t.void, (t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLbitfield, t.GLenum))
    gl.glGetVertexAttribIiv = gl_func( 'glGetVertexAttribIiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glVertexAttribI4i = gl_func( 'glVertexAttribI4i', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glBindRenderbuffer = gl_func( 'glBindRenderbuffer', t.void, (t.GLenum, t.GLuint))
    gl.glUniform2ui = gl_func( 'glUniform2ui', t.void, (t.GLint, t.GLuint, t.GLuint))
    gl.glVertexAttribI3iv = gl_func( 'glVertexAttribI3iv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glIsFramebuffer = gl_func( 'glIsFramebuffer', t.GLboolean, (t.GLuint,))
    gl.glDeleteVertexArrays = gl_func( 'glDeleteVertexArrays', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGetVertexAttribIuiv = gl_func( 'glGetVertexAttribIuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glTexParameterIiv = gl_func( 'glTexParameterIiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glFramebufferTexture1D = gl_func( 'glFramebufferTexture1D', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLuint, t.GLint))
    gl.glUniform2uiv = gl_func( 'glUniform2uiv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBeginConditionalRender = gl_func( 'glBeginConditionalRender', t.void, (t.GLuint, t.GLenum))
    gl.glClearBufferfv = gl_func( 'glClearBufferfv', t.void, (t.GLenum, t.GLint, ct.POINTER(t.GLfloat)))
    gl.glGetTexParameterIiv = gl_func( 'glGetTexParameterIiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetUniformuiv = gl_func( 'glGetUniformuiv', t.void, (t.GLuint, t.GLint, ct.POINTER(t.GLuint)))
    gl.glColorMaski = gl_func( 'glColorMaski', t.void, (t.GLuint, t.GLboolean, t.GLboolean, t.GLboolean, t.GLboolean))
    gl.glVertexAttribI3i = gl_func( 'glVertexAttribI3i', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint))
    gl.glDeleteRenderbuffers = gl_func( 'glDeleteRenderbuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glVertexAttribI2uiv = gl_func( 'glVertexAttribI2uiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glVertexAttribI4uiv = gl_func( 'glVertexAttribI4uiv', t.void, (t.GLuint, ct.POINTER(t.GLuint)))
    gl.glVertexAttribI4iv = gl_func( 'glVertexAttribI4iv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glGenFramebuffers = gl_func( 'glGenFramebuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGenRenderbuffers = gl_func( 'glGenRenderbuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glFlushMappedBufferRange = gl_func( 'glFlushMappedBufferRange', t.void, (t.GLenum, t.GLintptr, t.GLsizeiptr))
    gl.glBindFragDataLocation = gl_func( 'glBindFragDataLocation', t.void, (t.GLuint, t.GLuint, ct.POINTER(t.GLchar)))
    gl.glFramebufferTextureLayer = gl_func( 'glFramebufferTextureLayer', t.void, (t.GLenum, t.GLenum, t.GLuint, t.GLint, t.GLint))
    gl.glEndConditionalRender = gl_func( 'glEndConditionalRender', t.void, ())
    gl.glFramebufferRenderbuffer = gl_func( 'glFramebufferRenderbuffer', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLuint))
    gl.glClearBufferiv = gl_func( 'glClearBufferiv', t.void, (t.GLenum, t.GLint, ct.POINTER(t.GLint)))
    gl.glRenderbufferStorageMultisample = gl_func( 'glRenderbufferStorageMultisample', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei))
    gl.glClampColor = gl_func( 'glClampColor', t.void, (t.GLenum, t.GLenum))
    gl.glTexParameterIuiv = gl_func( 'glTexParameterIuiv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glBindBufferBase = gl_func( 'glBindBufferBase', t.void, (t.GLenum, t.GLuint, t.GLuint))

#### GL VERSION 3.1 ####
GL_UNIFORM_BUFFER_BINDING = 0x8A28
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42
GL_UNIFORM_OFFSET = 0x8A3B
GL_TEXTURE_BINDING_BUFFER = 0x8C2C
GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D
GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30
GL_RG16_SNORM = 0x8F99
GL_PRIMITIVE_RESTART = 0x8F9D
GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B
GL_UNIFORM_BUFFER = 0x8A11
GL_RGB8_SNORM = 0x8F96
GL_PRIMITIVE_RESTART_INDEX = 0x8F9E
GL_RGBA16_SNORM = 0x8F9B
GL_SAMPLER_2D_RECT = 0x8B63
GL_SIGNED_NORMALIZED = 0x8F9C
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45
GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44
GL_RG8_SNORM = 0x8F95
GL_UNIFORM_BUFFER_SIZE = 0x8A2A
GL_COPY_WRITE_BUFFER = 0x8F37
GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41
GL_TEXTURE_BINDING_RECTANGLE = 0x84F6
GL_TEXTURE_BUFFER = 0x8C2A
GL_UNIFORM_BLOCK_INDEX = 0x8A3A
GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8
GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40
GL_UNIFORM_MATRIX_STRIDE = 0x8A3D
GL_UNIFORM_SIZE = 0x8A38
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32
GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B
GL_PROXY_TEXTURE_RECTANGLE = 0x84F7
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D
GL_INT_SAMPLER_BUFFER = 0x8DD0
GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F
GL_R16_SNORM = 0x8F98
GL_SAMPLER_BUFFER = 0x8DC2
GL_UNIFORM_NAME_LENGTH = 0x8A39
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35
GL_SAMPLER_2D_RECT_SHADOW = 0x8B64
GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E
GL_UNIFORM_BUFFER_START = 0x8A29
GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5
GL_COPY_READ_BUFFER = 0x8F36
GL_TEXTURE_RECTANGLE = 0x84F5
GL_RGB16_SNORM = 0x8F9A
GL_R8_SNORM = 0x8F94
GL_INVALID_INDEX = 0xFFFFFFFF
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46
GL_INT_SAMPLER_2D_RECT = 0x8DCD
GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E
GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8
GL_RGBA8_SNORM = 0x8F97
GL_UNIFORM_TYPE = 0x8A37
GL_UNIFORM_BLOCK_BINDING = 0x8A3F
GL_UNIFORM_ARRAY_STRIDE = 0x8A3C
GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C

def init_gl_version_3_1():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glCopyBufferSubData = gl_func( 'glCopyBufferSubData', t.void, (t.GLenum, t.GLenum, t.GLintptr, t.GLintptr, t.GLsizeiptr))
    gl.glUniformBlockBinding = gl_func( 'glUniformBlockBinding', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glDrawElementsInstanced = gl_func( 'glDrawElementsInstanced', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLsizei))
    gl.glBindBufferRange = gl_func( 'glBindBufferRange', t.void, (t.GLenum, t.GLuint, t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glDrawArraysInstanced = gl_func( 'glDrawArraysInstanced', t.void, (t.GLenum, t.GLint, t.GLsizei, t.GLsizei))
    gl.glGetActiveUniformBlockName = gl_func( 'glGetActiveUniformBlockName', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glGetUniformBlockIndex = gl_func( 'glGetUniformBlockIndex', t.GLuint, (t.GLuint, ct.POINTER(t.GLchar)))
    gl.glGetActiveUniformName = gl_func( 'glGetActiveUniformName', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glGetUniformIndices = gl_func( 'glGetUniformIndices', t.void, (t.GLuint, t.GLsizei, ct.POINTER(ct.POINTER(t.GLchar)), ct.POINTER(t.GLuint)))
    gl.glTexBuffer = gl_func( 'glTexBuffer', t.void, (t.GLenum, t.GLenum, t.GLuint))
    gl.glPrimitiveRestartIndex = gl_func( 'glPrimitiveRestartIndex', t.void, (t.GLuint,))
    gl.glGetActiveUniformBlockiv = gl_func( 'glGetActiveUniformBlockiv', t.void, (t.GLuint, t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBindBufferBase = gl_func( 'glBindBufferBase', t.void, (t.GLenum, t.GLuint, t.GLuint))
    gl.glGetIntegeri_v = gl_func( 'glGetIntegeri_v', t.void, (t.GLenum, t.GLuint, t.GLint))
    gl.glGetActiveUniformsiv = gl_func( 'glGetActiveUniformsiv', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLuint), t.GLenum, ct.POINTER(t.GLint)))

#### GL VERSION 3.2 ####
GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122
GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117
GL_TIMEOUT_EXPIRED = 0x911B
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107
GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101
GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF
GL_PROGRAM_POINT_SIZE = 0x8642
GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001
GL_LINE_STRIP_ADJACENCY = 0x000B
GL_TRIANGLE_STRIP_ADJACENCY = 0x000D
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001
GL_SAMPLE_MASK_VALUE = 0x8E52
GL_SYNC_STATUS = 0x9114
GL_OBJECT_TYPE = 0x9112
GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F
GL_FIRST_VERTEX_CONVENTION = 0x8E4D
GL_GEOMETRY_OUTPUT_TYPE = 0x8918
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124
GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111
GL_MAX_INTEGER_SAMPLES = 0x9110
GL_PROVOKING_VERTEX = 0x8E4F
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105
GL_WAIT_FAILED = 0x911D
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF
GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29
GL_SYNC_FLAGS = 0x9115
GL_SYNC_FENCE = 0x9116
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C
GL_DEPTH_CLAMP = 0x864F
GL_ALREADY_SIGNALED = 0x911A
GL_UNSIGNALED = 0x9118
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C
GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7
GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0
GL_SAMPLE_POSITION = 0x8E50
GL_TEXTURE_2D_MULTISAMPLE = 0x9100
GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109
GL_LINES_ADJACENCY = 0x000A
GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8
GL_MAX_SAMPLE_MASK_WORDS = 0x8E59
GL_SAMPLER_2D_MULTISAMPLE = 0x9108
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B
GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F
GL_CONTEXT_PROFILE_MASK = 0x9126
GL_TEXTURE_SAMPLES = 0x9106
GL_SAMPLE_MASK = 0x8E51
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
GL_LAST_VERTEX_CONVENTION = 0x8E4E
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1
GL_GEOMETRY_INPUT_TYPE = 0x8917
GL_GEOMETRY_SHADER = 0x8DD9
GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125
GL_TRIANGLES_ADJACENCY = 0x000C
GL_GEOMETRY_VERTICES_OUT = 0x8916
GL_CONDITION_SATISFIED = 0x911C
GL_SYNC_CONDITION = 0x9113
GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104
GL_SIGNALED = 0x9119

def init_gl_version_3_2():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glIsSync = gl_func( 'glIsSync', t.GLboolean, (t.GLsync,))
    gl.glGetSynciv = gl_func( 'glGetSynciv', t.void, (t.GLsync, t.GLenum, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLint)))
    gl.glSampleMaski = gl_func( 'glSampleMaski', t.void, (t.GLuint, t.GLbitfield))
    gl.glTexImage3DMultisample = gl_func( 'glTexImage3DMultisample', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glTexImage2DMultisample = gl_func( 'glTexImage2DMultisample', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glProvokingVertex = gl_func( 'glProvokingVertex', t.void, (t.GLenum,))
    gl.glFramebufferTexture = gl_func( 'glFramebufferTexture', t.void, (t.GLenum, t.GLenum, t.GLuint, t.GLint))
    gl.glGetMultisamplefv = gl_func( 'glGetMultisamplefv', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glGetBufferParameteri64v = gl_func( 'glGetBufferParameteri64v', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint64)))
    gl.glGetInteger64v = gl_func( 'glGetInteger64v', t.void, (t.GLenum, ct.POINTER(t.GLint64)))
    gl.glDrawRangeElementsBaseVertex = gl_func( 'glDrawRangeElementsBaseVertex', t.void, (t.GLenum, t.GLuint, t.GLuint, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLint))
    gl.glDeleteSync = gl_func( 'glDeleteSync', t.void, (t.GLsync,))
    gl.glClientWaitSync = gl_func( 'glClientWaitSync', t.GLenum, (t.GLsync, t.GLbitfield, t.GLuint64))
    gl.glMultiDrawElementsBaseVertex = gl_func( 'glMultiDrawElementsBaseVertex', t.void, (t.GLenum, ct.POINTER(t.GLsizei), t.GLenum, ct.POINTER(ct.POINTER(t.void)), t.GLsizei, ct.POINTER(t.GLint)))
    gl.glDrawElementsInstancedBaseVertex = gl_func( 'glDrawElementsInstancedBaseVertex', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLsizei, t.GLint))
    gl.glFenceSync = gl_func( 'glFenceSync', t.GLsync, (t.GLenum, t.GLbitfield))
    gl.glDrawElementsBaseVertex = gl_func( 'glDrawElementsBaseVertex', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLint))
    gl.glGetInteger64i_v = gl_func( 'glGetInteger64i_v', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLint64)))
    gl.glWaitSync = gl_func( 'glWaitSync', t.void, (t.GLsync, t.GLbitfield, t.GLuint64))

#### GL VERSION 3.3 ####
GL_ONE_MINUS_SRC1_ALPHA = 0x88FB
GL_INT_2_10_10_10_REV = 0x8D9F
GL_TEXTURE_SWIZZLE_A = 0x8E45
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC
GL_SAMPLER_BINDING = 0x8919
GL_TEXTURE_SWIZZLE_B = 0x8E44
GL_TEXTURE_SWIZZLE_G = 0x8E43
GL_TIMESTAMP = 0x8E28
GL_TEXTURE_SWIZZLE_R = 0x8E42
GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE
GL_ANY_SAMPLES_PASSED = 0x8C2F
GL_TEXTURE_SWIZZLE_RGBA = 0x8E46
GL_TIME_ELAPSED = 0x88BF
GL_SRC1_COLOR = 0x88F9
GL_RGB10_A2UI = 0x906F
GL_ONE_MINUS_SRC1_COLOR = 0x88FA

def init_gl_version_3_3():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glVertexAttribP2ui = gl_func( 'glVertexAttribP2ui', t.void, (t.GLuint, t.GLenum, t.GLboolean, t.GLuint))
    gl.glVertexAttribP3uiv = gl_func( 'glVertexAttribP3uiv', t.void, (t.GLuint, t.GLenum, t.GLboolean, ct.POINTER(t.GLuint)))
    gl.glSamplerParameteri = gl_func( 'glSamplerParameteri', t.void, (t.GLuint, t.GLenum, t.GLint))
    gl.glGetSamplerParameterIiv = gl_func( 'glGetSamplerParameterIiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGenSamplers = gl_func( 'glGenSamplers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glIsSampler = gl_func( 'glIsSampler', t.GLboolean, (t.GLuint,))
    gl.glGetQueryObjecti64v = gl_func( 'glGetQueryObjecti64v', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint64)))
    gl.glSamplerParameterf = gl_func( 'glSamplerParameterf', t.void, (t.GLuint, t.GLenum, t.GLfloat))
    gl.glBindSampler = gl_func( 'glBindSampler', t.void, (t.GLuint, t.GLuint))
    gl.glVertexAttribP3ui = gl_func( 'glVertexAttribP3ui', t.void, (t.GLuint, t.GLenum, t.GLboolean, t.GLuint))
    gl.glVertexAttribP4ui = gl_func( 'glVertexAttribP4ui', t.void, (t.GLuint, t.GLenum, t.GLboolean, t.GLuint))
    gl.glGetFragDataIndex = gl_func( 'glGetFragDataIndex', t.GLint, (t.GLuint, ct.POINTER(t.GLchar)))
    gl.glGetQueryObjectui64v = gl_func( 'glGetQueryObjectui64v', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint64)))
    gl.glSamplerParameterIiv = gl_func( 'glSamplerParameterIiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBindFragDataLocationIndexed = gl_func( 'glBindFragDataLocationIndexed', t.void, (t.GLuint, t.GLuint, t.GLuint, ct.POINTER(t.GLchar)))
    gl.glGetSamplerParameterfv = gl_func( 'glGetSamplerParameterfv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glVertexAttribP4uiv = gl_func( 'glVertexAttribP4uiv', t.void, (t.GLuint, t.GLenum, t.GLboolean, ct.POINTER(t.GLuint)))
    gl.glVertexAttribDivisor = gl_func( 'glVertexAttribDivisor', t.void, (t.GLuint, t.GLuint))
    gl.glVertexAttribP2uiv = gl_func( 'glVertexAttribP2uiv', t.void, (t.GLuint, t.GLenum, t.GLboolean, ct.POINTER(t.GLuint)))
    gl.glQueryCounter = gl_func( 'glQueryCounter', t.void, (t.GLuint, t.GLenum))
    gl.glSamplerParameterIuiv = gl_func( 'glSamplerParameterIuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glGetSamplerParameteriv = gl_func( 'glGetSamplerParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glSamplerParameterfv = gl_func( 'glSamplerParameterfv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glSamplerParameteriv = gl_func( 'glSamplerParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetSamplerParameterIuiv = gl_func( 'glGetSamplerParameterIuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glDeleteSamplers = gl_func( 'glDeleteSamplers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glVertexAttribP1uiv = gl_func( 'glVertexAttribP1uiv', t.void, (t.GLuint, t.GLenum, t.GLboolean, ct.POINTER(t.GLuint)))
    gl.glVertexAttribP1ui = gl_func( 'glVertexAttribP1ui', t.void, (t.GLuint, t.GLenum, t.GLboolean, t.GLuint))

#### GL VERSION 4.0 ####
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85
GL_TESS_EVALUATION_SHADER = 0x8E87
GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74
GL_DOUBLE_MAT2x3 = 0x8F49
GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B
GL_ACTIVE_SUBROUTINES = 0x8DE5
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E
GL_FRACTIONAL_ODD = 0x8E7B
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70
GL_DOUBLE_MAT4x2 = 0x8F4D
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F
GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D
GL_PATCHES = 0x000E
GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8
GL_DRAW_INDIRECT_BUFFER = 0x8F3F
GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48
GL_DOUBLE_VEC3 = 0x8FFD
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47
GL_TESS_CONTROL_SHADER = 0x8E88
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A
GL_TESS_GEN_POINT_MODE = 0x8E79
GL_MAX_SUBROUTINES = 0x8DE7
GL_DOUBLE_MAT2x4 = 0x8F4A
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49
GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1
GL_MAX_TESS_GEN_LEVEL = 0x8E7E
GL_DOUBLE_VEC2 = 0x8FFC
GL_ISOLINES = 0x8E7A
GL_FRACTIONAL_EVEN = 0x8E7C
GL_SAMPLE_SHADING = 0x8C36
GL_DOUBLE_MAT4 = 0x8F48
GL_TESS_GEN_MODE = 0x8E76
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D
GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82
GL_TESS_GEN_SPACING = 0x8E77
GL_DOUBLE_MAT4x3 = 0x8F4E
GL_TESS_GEN_VERTEX_ORDER = 0x8E78
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23
GL_MAX_VERTEX_STREAMS = 0x8E71
GL_DOUBLE_MAT3x2 = 0x8F4B
GL_MAX_PATCH_VERTICES = 0x8E7D
GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E
GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A
GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37
GL_QUADS = 0x0007
GL_DOUBLE_MAT2 = 0x8F46
GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73
GL_DOUBLE_MAT3 = 0x8F47
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89
GL_DOUBLE_MAT3x4 = 0x8F4C
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83
GL_DOUBLE_VEC4 = 0x8FFE
GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80
GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A
GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75
GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6
GL_PATCH_VERTICES = 0x8E72
GL_TRANSFORM_FEEDBACK = 0x8E22
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F
GL_COMPATIBLE_SUBROUTINES = 0x8E4B

def init_gl_version_4_0():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glUniformSubroutinesuiv = gl_func( 'glUniformSubroutinesuiv', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGetActiveSubroutineName = gl_func( 'glGetActiveSubroutineName', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glUniform2dv = gl_func( 'glUniform2dv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glGetSubroutineIndex = gl_func( 'glGetSubroutineIndex', t.GLuint, (t.GLuint, t.GLenum, ct.POINTER(t.GLchar)))
    gl.glUniform3dv = gl_func( 'glUniform3dv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glDrawArraysIndirect = gl_func( 'glDrawArraysIndirect', t.void, (t.GLenum, ct.POINTER(t.void)))
    gl.glUniformMatrix3x2dv = gl_func( 'glUniformMatrix3x2dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glIsTransformFeedback = gl_func( 'glIsTransformFeedback', t.GLboolean, (t.GLuint,))
    gl.glPatchParameteri = gl_func( 'glPatchParameteri', t.void, (t.GLenum, t.GLint))
    gl.glEndQueryIndexed = gl_func( 'glEndQueryIndexed', t.void, (t.GLenum, t.GLuint))
    gl.glBlendFuncSeparatei = gl_func( 'glBlendFuncSeparatei', t.void, (t.GLuint, t.GLenum, t.GLenum, t.GLenum, t.GLenum))
    gl.glDrawElementsIndirect = gl_func( 'glDrawElementsIndirect', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetActiveSubroutineUniformiv = gl_func( 'glGetActiveSubroutineUniformiv', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBeginQueryIndexed = gl_func( 'glBeginQueryIndexed', t.void, (t.GLenum, t.GLuint, t.GLuint))
    gl.glUniformMatrix4dv = gl_func( 'glUniformMatrix4dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glResumeTransformFeedback = gl_func( 'glResumeTransformFeedback', t.void, ())
    gl.glUniform1dv = gl_func( 'glUniform1dv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glGetSubroutineUniformLocation = gl_func( 'glGetSubroutineUniformLocation', t.GLint, (t.GLuint, t.GLenum, ct.POINTER(t.GLchar)))
    gl.glUniformMatrix3dv = gl_func( 'glUniformMatrix3dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glDrawTransformFeedback = gl_func( 'glDrawTransformFeedback', t.void, (t.GLenum, t.GLuint))
    gl.glUniformMatrix2x4dv = gl_func( 'glUniformMatrix2x4dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glBlendEquationSeparatei = gl_func( 'glBlendEquationSeparatei', t.void, (t.GLuint, t.GLenum, t.GLenum))
    gl.glGetUniformSubroutineuiv = gl_func( 'glGetUniformSubroutineuiv', t.void, (t.GLenum, t.GLint, ct.POINTER(t.GLuint)))
    gl.glGetQueryIndexediv = gl_func( 'glGetQueryIndexediv', t.void, (t.GLenum, t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBlendFunci = gl_func( 'glBlendFunci', t.void, (t.GLuint, t.GLenum, t.GLenum))
    gl.glUniform3d = gl_func( 'glUniform3d', t.void, (t.GLint, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glUniform4dv = gl_func( 'glUniform4dv', t.void, (t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glMinSampleShading = gl_func( 'glMinSampleShading', t.void, (t.GLfloat,))
    gl.glUniform1d = gl_func( 'glUniform1d', t.void, (t.GLint, t.GLdouble))
    gl.glUniform2d = gl_func( 'glUniform2d', t.void, (t.GLint, t.GLdouble, t.GLdouble))
    gl.glGenTransformFeedbacks = gl_func( 'glGenTransformFeedbacks', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glUniformMatrix3x4dv = gl_func( 'glUniformMatrix3x4dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glBlendEquationi = gl_func( 'glBlendEquationi', t.void, (t.GLuint, t.GLenum))
    gl.glGetActiveSubroutineUniformName = gl_func( 'glGetActiveSubroutineUniformName', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glUniformMatrix2dv = gl_func( 'glUniformMatrix2dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glUniformMatrix4x3dv = gl_func( 'glUniformMatrix4x3dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glPauseTransformFeedback = gl_func( 'glPauseTransformFeedback', t.void, ())
    gl.glGetProgramStageiv = gl_func( 'glGetProgramStageiv', t.void, (t.GLuint, t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glUniformMatrix4x2dv = gl_func( 'glUniformMatrix4x2dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glDrawTransformFeedbackStream = gl_func( 'glDrawTransformFeedbackStream', t.void, (t.GLenum, t.GLuint, t.GLuint))
    gl.glUniform4d = gl_func( 'glUniform4d', t.void, (t.GLint, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glPatchParameterfv = gl_func( 'glPatchParameterfv', t.void, (t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glGetUniformdv = gl_func( 'glGetUniformdv', t.void, (t.GLuint, t.GLint, ct.POINTER(t.GLdouble)))
    gl.glBindTransformFeedback = gl_func( 'glBindTransformFeedback', t.void, (t.GLenum, t.GLuint))
    gl.glDeleteTransformFeedbacks = gl_func( 'glDeleteTransformFeedbacks', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glUniformMatrix2x3dv = gl_func( 'glUniformMatrix2x3dv', t.void, (t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))

#### GL VERSION 4.1 ####
GL_MAX_VARYING_VECTORS = 0x8DFC
GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE
GL_PROGRAM_PIPELINE_BINDING = 0x825A
GL_LAYER_PROVOKING_VERTEX = 0x825E
GL_PROGRAM_BINARY_LENGTH = 0x8741
GL_SHADER_BINARY_FORMATS = 0x8DF8
GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9
GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
GL_LOW_INT = 0x8DF3
GL_HIGH_FLOAT = 0x8DF2
GL_FRAGMENT_SHADER_BIT = 0x00000002
GL_PROGRAM_SEPARABLE = 0x8258
GL_TESS_CONTROL_SHADER_BIT = 0x00000008
GL_LOW_FLOAT = 0x8DF0
GL_PROGRAM_BINARY_FORMATS = 0x87FF
GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257
GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F
GL_RGB565 = 0x8D62
GL_SHADER_COMPILER = 0x8DFA
GL_GEOMETRY_SHADER_BIT = 0x00000004
GL_UNDEFINED_VERTEX = 0x8260
GL_HIGH_INT = 0x8DF5
GL_VIEWPORT_SUBPIXEL_BITS = 0x825C
GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
GL_MAX_VIEWPORTS = 0x825B
GL_MEDIUM_INT = 0x8DF4
GL_FIXED = 0x140C
GL_ACTIVE_PROGRAM = 0x8259
GL_TESS_EVALUATION_SHADER_BIT = 0x00000010
GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
GL_VIEWPORT_BOUNDS_RANGE = 0x825D
GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
GL_MEDIUM_FLOAT = 0x8DF1
GL_VERTEX_SHADER_BIT = 0x00000001
GL_ALL_SHADER_BITS = 0xFFFFFFFF

def init_gl_version_4_1():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glProgramUniform1ui = gl_func( 'glProgramUniform1ui', t.void, (t.GLuint, t.GLint, t.GLuint))
    gl.glProgramUniform3f = gl_func( 'glProgramUniform3f', t.void, (t.GLuint, t.GLint, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glVertexAttribLPointer = gl_func( 'glVertexAttribLPointer', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glProgramUniform4fv = gl_func( 'glProgramUniform4fv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glGetFloati_v = gl_func( 'glGetFloati_v', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glProgramUniform4uiv = gl_func( 'glProgramUniform4uiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glProgramUniformMatrix4x3fv = gl_func( 'glProgramUniformMatrix4x3fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glProgramUniformMatrix4x2dv = gl_func( 'glProgramUniformMatrix4x2dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glIsProgramPipeline = gl_func( 'glIsProgramPipeline', t.GLboolean, (t.GLuint,))
    gl.glDepthRangef = gl_func( 'glDepthRangef', t.void, (t.GLfloat, t.GLfloat))
    gl.glViewportIndexedf = gl_func( 'glViewportIndexedf', t.void, (t.GLuint, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glProgramUniform1fv = gl_func( 'glProgramUniform1fv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glGetDoublei_v = gl_func( 'glGetDoublei_v', t.void, (t.GLenum, t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glProgramUniformMatrix3dv = gl_func( 'glProgramUniformMatrix3dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform2fv = gl_func( 'glProgramUniform2fv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glDepthRangeArrayv = gl_func( 'glDepthRangeArrayv', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glVertexAttribL4d = gl_func( 'glVertexAttribL4d', t.void, (t.GLuint, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glCreateShaderProgramv = gl_func( 'glCreateShaderProgramv', t.GLuint, (t.GLenum, t.GLsizei, ct.POINTER(ct.POINTER(t.GLchar))))
    gl.glProgramParameteri = gl_func( 'glProgramParameteri', t.void, (t.GLuint, t.GLenum, t.GLint))
    gl.glProgramUniform1f = gl_func( 'glProgramUniform1f', t.void, (t.GLuint, t.GLint, t.GLfloat))
    gl.glViewportIndexedfv = gl_func( 'glViewportIndexedfv', t.void, (t.GLuint, ct.POINTER(t.GLfloat)))
    gl.glProgramUniform3dv = gl_func( 'glProgramUniform3dv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glProgramUniformMatrix2fv = gl_func( 'glProgramUniformMatrix2fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glValidateProgramPipeline = gl_func( 'glValidateProgramPipeline', t.void, (t.GLuint,))
    gl.glVertexAttribL3dv = gl_func( 'glVertexAttribL3dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glVertexAttribL1d = gl_func( 'glVertexAttribL1d', t.void, (t.GLuint, t.GLdouble))
    gl.glProgramUniform3d = gl_func( 'glProgramUniform3d', t.void, (t.GLuint, t.GLint, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glProgramUniform4d = gl_func( 'glProgramUniform4d', t.void, (t.GLuint, t.GLint, t.GLdouble, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glProgramUniform1i = gl_func( 'glProgramUniform1i', t.void, (t.GLuint, t.GLint, t.GLint))
    gl.glVertexAttribL1dv = gl_func( 'glVertexAttribL1dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glProgramUniformMatrix2x3fv = gl_func( 'glProgramUniformMatrix2x3fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glScissorIndexedv = gl_func( 'glScissorIndexedv', t.void, (t.GLuint, ct.POINTER(t.GLint)))
    gl.glProgramUniform3iv = gl_func( 'glProgramUniform3iv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glGetShaderPrecisionFormat = gl_func( 'glGetShaderPrecisionFormat', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint), ct.POINTER(t.GLint)))
    gl.glGetProgramPipelineiv = gl_func( 'glGetProgramPipelineiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glActiveShaderProgram = gl_func( 'glActiveShaderProgram', t.void, (t.GLuint, t.GLuint))
    gl.glProgramUniformMatrix4x2fv = gl_func( 'glProgramUniformMatrix4x2fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glProgramUniform4i = gl_func( 'glProgramUniform4i', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glProgramUniform4f = gl_func( 'glProgramUniform4f', t.void, (t.GLuint, t.GLint, t.GLfloat, t.GLfloat, t.GLfloat, t.GLfloat))
    gl.glProgramUniformMatrix2x3dv = gl_func( 'glProgramUniformMatrix2x3dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glProgramUniformMatrix2x4fv = gl_func( 'glProgramUniformMatrix2x4fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glProgramUniformMatrix4fv = gl_func( 'glProgramUniformMatrix4fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glShaderBinary = gl_func( 'glShaderBinary', t.void, (t.GLsizei, ct.POINTER(t.GLuint), t.GLenum, ct.POINTER(t.void), t.GLsizei))
    gl.glReleaseShaderCompiler = gl_func( 'glReleaseShaderCompiler', t.void, ())
    gl.glDepthRangeIndexed = gl_func( 'glDepthRangeIndexed', t.void, (t.GLuint, t.GLdouble, t.GLdouble))
    gl.glProgramUniform4ui = gl_func( 'glProgramUniform4ui', t.void, (t.GLuint, t.GLint, t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glProgramUniformMatrix3x2fv = gl_func( 'glProgramUniformMatrix3x2fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glGenProgramPipelines = gl_func( 'glGenProgramPipelines', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glProgramUniformMatrix2x4dv = gl_func( 'glProgramUniformMatrix2x4dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform2uiv = gl_func( 'glProgramUniform2uiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glProgramUniform3uiv = gl_func( 'glProgramUniform3uiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glProgramUniformMatrix3x4fv = gl_func( 'glProgramUniformMatrix3x4fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glProgramUniform3i = gl_func( 'glProgramUniform3i', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint))
    gl.glProgramUniformMatrix3fv = gl_func( 'glProgramUniformMatrix3fv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLfloat)))
    gl.glProgramUniformMatrix3x2dv = gl_func( 'glProgramUniformMatrix3x2dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glVertexAttribL4dv = gl_func( 'glVertexAttribL4dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform4dv = gl_func( 'glProgramUniform4dv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform2f = gl_func( 'glProgramUniform2f', t.void, (t.GLuint, t.GLint, t.GLfloat, t.GLfloat))
    gl.glVertexAttribL2d = gl_func( 'glVertexAttribL2d', t.void, (t.GLuint, t.GLdouble, t.GLdouble))
    gl.glProgramUniform1uiv = gl_func( 'glProgramUniform1uiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glScissorArrayv = gl_func( 'glScissorArrayv', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glProgramUniformMatrix2dv = gl_func( 'glProgramUniformMatrix2dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform3ui = gl_func( 'glProgramUniform3ui', t.void, (t.GLuint, t.GLint, t.GLuint, t.GLuint, t.GLuint))
    gl.glProgramUniformMatrix4x3dv = gl_func( 'glProgramUniformMatrix4x3dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform1iv = gl_func( 'glProgramUniform1iv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glProgramUniform2dv = gl_func( 'glProgramUniform2dv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glClearDepthf = gl_func( 'glClearDepthf', t.void, (t.GLfloat,))
    gl.glProgramBinary = gl_func( 'glProgramBinary', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.void), t.GLsizei))
    gl.glProgramUniform3fv = gl_func( 'glProgramUniform3fv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glProgramUniform2i = gl_func( 'glProgramUniform2i', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint))
    gl.glGetProgramBinary = gl_func( 'glGetProgramBinary', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLenum), ct.POINTER(t.void)))
    gl.glGetProgramPipelineInfoLog = gl_func( 'glGetProgramPipelineInfoLog', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glVertexAttribL3d = gl_func( 'glVertexAttribL3d', t.void, (t.GLuint, t.GLdouble, t.GLdouble, t.GLdouble))
    gl.glProgramUniform2iv = gl_func( 'glProgramUniform2iv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glProgramUniform2d = gl_func( 'glProgramUniform2d', t.void, (t.GLuint, t.GLint, t.GLdouble, t.GLdouble))
    gl.glProgramUniformMatrix3x4dv = gl_func( 'glProgramUniformMatrix3x4dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glUseProgramStages = gl_func( 'glUseProgramStages', t.void, (t.GLuint, t.GLbitfield, t.GLuint))
    gl.glProgramUniform2ui = gl_func( 'glProgramUniform2ui', t.void, (t.GLuint, t.GLint, t.GLuint, t.GLuint))
    gl.glProgramUniform4iv = gl_func( 'glProgramUniform4iv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glGetVertexAttribLdv = gl_func( 'glGetVertexAttribLdv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLdouble)))
    gl.glScissorIndexed = gl_func( 'glScissorIndexed', t.void, (t.GLuint, t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glProgramUniform1dv = gl_func( 'glProgramUniform1dv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glProgramUniform1d = gl_func( 'glProgramUniform1d', t.void, (t.GLuint, t.GLint, t.GLdouble))
    gl.glViewportArrayv = gl_func( 'glViewportArrayv', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLfloat)))
    gl.glProgramUniformMatrix4dv = gl_func( 'glProgramUniformMatrix4dv', t.void, (t.GLuint, t.GLint, t.GLsizei, t.GLboolean, ct.POINTER(t.GLdouble)))
    gl.glDeleteProgramPipelines = gl_func( 'glDeleteProgramPipelines', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBindProgramPipeline = gl_func( 'glBindProgramPipeline', t.void, (t.GLuint,))
    gl.glVertexAttribL2dv = gl_func( 'glVertexAttribL2dv', t.void, (t.GLuint, ct.POINTER(t.GLdouble)))

#### GL VERSION 4.2 ####
GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127
GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF
GL_UNSIGNED_INT_IMAGE_1D = 0x9062
GL_INT_IMAGE_1D = 0x9057
GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7
GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000
GL_IMAGE_BINDING_NAME = 0x8F3A
GL_ATOMIC_COUNTER_BUFFER = 0x92C0
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A
GL_UNSIGNED_INT_IMAGE_2D = 0x9063
GL_COPY_READ_BUFFER_BINDING = 0x8F36
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC
GL_UNIFORM_BARRIER_BIT = 0x00000004
GL_UNSIGNED_INT_IMAGE_3D = 0x9064
GL_IMAGE_CUBE_MAP_ARRAY = 0x9054
GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E
GL_IMAGE_CUBE = 0x9050
GL_IMAGE_2D_RECT = 0x904F
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5
GL_ALL_BARRIER_BITS = 0xFFFFFFFF
GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008
GL_IMAGE_1D_ARRAY = 0x9052
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB
GL_IMAGE_1D = 0x904C
GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8
GL_NUM_SAMPLE_COUNTS = 0x9380
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6
GL_IMAGE_2D_ARRAY = 0x9053
GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39
GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067
GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D
GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060
GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F
GL_MAX_IMAGE_UNITS = 0x8F38
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE
GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1
GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056
GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA
GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F
GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080
GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE
GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069
GL_INT_IMAGE_3D = 0x9059
GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6
GL_INT_IMAGE_BUFFER = 0x905C
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3
GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061
GL_COMMAND_BARRIER_BIT = 0x00000040
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7
GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800
GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C
GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF
GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA
GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC
GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8
GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129
GL_MAX_IMAGE_SAMPLES = 0x906D
GL_INT_IMAGE_CUBE = 0x905B
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9
GL_INT_IMAGE_1D_ARRAY = 0x905D
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B
GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C
GL_IMAGE_BINDING_LAYER = 0x8F3D
GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C
GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD
GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F
GL_IMAGE_BINDING_LAYERED = 0x8F3C
GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1
GL_INT_IMAGE_2D = 0x9058
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020
GL_IMAGE_BINDING_LEVEL = 0x8F3B
GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100
GL_IMAGE_BINDING_FORMAT = 0x906E
GL_IMAGE_2D = 0x904D
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E
GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5
GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4
GL_INT_IMAGE_2D_ARRAY = 0x905E
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4
GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC
GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB
GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8
GL_INT_IMAGE_2D_RECT = 0x905A
GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7
GL_COPY_WRITE_BUFFER_BINDING = 0x8F37
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA
GL_IMAGE_2D_MULTISAMPLE = 0x9055
GL_IMAGE_BUFFER = 0x9051
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD
GL_IMAGE_BINDING_ACCESS = 0x8F3E
GL_IMAGE_3D = 0x904E
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC

def init_gl_version_4_2():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glDrawTransformFeedbackInstanced = gl_func( 'glDrawTransformFeedbackInstanced', t.void, (t.GLenum, t.GLuint, t.GLsizei))
    gl.glDrawElementsInstancedBaseInstance = gl_func( 'glDrawElementsInstancedBaseInstance', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLsizei, t.GLuint))
    gl.glDrawElementsInstancedBaseVertexBaseInstance = gl_func( 'glDrawElementsInstancedBaseVertexBaseInstance', t.void, (t.GLenum, t.GLsizei, t.GLenum, ct.POINTER(t.void), t.GLsizei, t.GLint, t.GLuint))
    gl.glGetActiveAtomicCounterBufferiv = gl_func( 'glGetActiveAtomicCounterBufferiv', t.void, (t.GLuint, t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glBindImageTexture = gl_func( 'glBindImageTexture', t.void, (t.GLuint, t.GLuint, t.GLint, t.GLboolean, t.GLint, t.GLenum, t.GLenum))
    gl.glMemoryBarrier = gl_func( 'glMemoryBarrier', t.void, (t.GLbitfield,))
    gl.glTexStorage3D = gl_func( 'glTexStorage3D', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei))
    gl.glDrawArraysInstancedBaseInstance = gl_func( 'glDrawArraysInstancedBaseInstance', t.void, (t.GLenum, t.GLint, t.GLsizei, t.GLsizei, t.GLuint))
    gl.glGetInternalformativ = gl_func( 'glGetInternalformativ', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glDrawTransformFeedbackStreamInstanced = gl_func( 'glDrawTransformFeedbackStreamInstanced', t.void, (t.GLenum, t.GLuint, t.GLuint, t.GLsizei))
    gl.glTexStorage1D = gl_func( 'glTexStorage1D', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei))
    gl.glTexStorage2D = gl_func( 'glTexStorage2D', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei))

#### GL VERSION 4.3 ####
GL_UNIFORM_BLOCK = 0x92E2
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA
GL_VERTEX_ATTRIB_BINDING = 0x82D4
GL_TEXTURE_GATHER_SHADOW = 0x82A3
GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3
GL_IMAGE_TEXEL_SIZE = 0x82A7
GL_TEXTURE_IMAGE_TYPE = 0x8290
GL_VIEW_CLASS_48_BITS = 0x82C7
GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE
GL_OFFSET = 0x92FC
GL_VIEW_CLASS_32_BITS = 0x82C8
GL_DEBUG_TYPE_PORTABILITY = 0x824F
GL_VIEW_CLASS_BPTC_UNORM = 0x82D2
GL_IMAGE_CLASS_1_X_8 = 0x82C1
GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311
GL_ARRAY_STRIDE = 0x92FE
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6
GL_VIEW_CLASS_64_BITS = 0x82C6
GL_IS_ROW_MAJOR = 0x9300
GL_AUTO_GENERATE_MIPMAP = 0x8295
GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247
GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263
GL_ARRAY_SIZE = 0x92FB
GL_PROGRAM = 0x82E2
GL_PROGRAM_INPUT = 0x92E3
GL_BUFFER_DATA_SIZE = 0x9303
GL_INTERNALFORMAT_GREEN_SIZE = 0x8272
GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301
GL_VIEW_CLASS_RGTC2_RG = 0x82D1
GL_GEOMETRY_SUBROUTINE = 0x92EB
GL_COMPRESSED_SIGNED_R11_EAC = 0x9271
GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B
GL_TESS_CONTROL_TEXTURE = 0x829C
GL_MAX_LABEL_LENGTH = 0x82E8
GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF
GL_MANUAL_GENERATE_MIPMAP = 0x8294
GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313
GL_NUM_ACTIVE_VARIABLES = 0x9304
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD
GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D
GL_GET_TEXTURE_IMAGE_TYPE = 0x8292
GL_UNIFORM = 0x92E1
GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD
GL_READ_PIXELS = 0x828C
GL_DEPTH_RENDERABLE = 0x8287
GL_VERTEX_BINDING_DIVISOR = 0x82D6
GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF
GL_DEBUG_SEVERITY_MEDIUM = 0x9147
GL_READ_PIXELS_TYPE = 0x828E
GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318
GL_IMAGE_CLASS_2_X_16 = 0x82BD
GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF
GL_FRAMEBUFFER_RENDERABLE = 0x8289
GL_READ_PIXELS_FORMAT = 0x828D
GL_DEBUG_SOURCE_APPLICATION = 0x824A
GL_DEBUG_TYPE_PERFORMANCE = 0x8250
GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9
GL_DEBUG_CALLBACK_FUNCTION = 0x8244
GL_IMAGE_CLASS_4_X_32 = 0x82B9
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9
GL_DEBUG_SEVERITY_LOW = 0x9148
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE
GL_INTERNALFORMAT_RED_TYPE = 0x8278
GL_INTERNALFORMAT_BLUE_SIZE = 0x8273
GL_MAX_DEPTH = 0x8280
GL_TEXTURE_BUFFER_SIZE = 0x919E
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1
GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291
GL_COMPRESSED_R11_EAC = 0x9270
GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD
GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD
GL_DEBUG_OUTPUT = 0x92E0
GL_TYPE = 0x92FA
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243
GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7
GL_COMPUTE_SHADER = 0x91B9
GL_STENCIL_COMPONENTS = 0x8285
GL_DEBUG_TYPE_MARKER = 0x8268
GL_STENCIL_RENDERABLE = 0x8288
GL_SAMPLER = 0x82E6
GL_INTERNALFORMAT_SHARED_SIZE = 0x8277
GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312
GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265
GL_IMAGE_PIXEL_TYPE = 0x82AA
GL_CLEAR_BUFFER = 0x82B4
GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274
GL_PROGRAM_OUTPUT = 0x92E4
GL_VERTEX_BINDING_OFFSET = 0x82D7
GL_FRAGMENT_SUBROUTINE = 0x92EC
GL_SHADER_IMAGE_STORE = 0x82A5
GL_PROGRAM_PIPELINE = 0x82E4
GL_COLOR_RENDERABLE = 0x8286
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF
GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE
GL_IMAGE_CLASS_2_X_8 = 0x82C0
GL_TEXTURE_SHADOW = 0x82A1
GL_DEBUG_LOGGED_MESSAGES = 0x9145
GL_VERTEX_BINDING_STRIDE = 0x82D8
GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314
GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308
GL_INTERNALFORMAT_GREEN_TYPE = 0x8279
GL_BUFFER_VARIABLE = 0x92E5
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9
GL_FRAMEBUFFER_BLEND = 0x828B
GL_DEPTH_COMPONENTS = 0x8284
GL_SHADER_STORAGE_BLOCK = 0x92E6
GL_VERTEX_SUBROUTINE = 0x92E8
GL_MATRIX_STRIDE = 0x92FF
GL_SRGB_READ = 0x8297
GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED
GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1
GL_IMAGE_CLASS_4_X_8 = 0x82BF
GL_FULL_SUPPORT = 0x82B7
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266
GL_LOCATION = 0x930E
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E
GL_SHADER_IMAGE_ATOMIC = 0x82A6
GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB
GL_MAX_WIDTH = 0x827E
GL_SHADER_STORAGE_BUFFER_START = 0x90D4
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264
GL_IMAGE_CLASS_2_X_32 = 0x82BA
GL_ACTIVE_RESOURCES = 0x92F5
GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B
GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8
GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A
GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A
GL_DEBUG_SOURCE_OTHER = 0x824B
GL_MIPMAP = 0x8293
GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE
GL_BLOCK_INDEX = 0x92FD
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB
GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242
GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C
GL_COLOR_ENCODING = 0x8296
GL_COMPRESSED_RG11_EAC = 0x9272
GL_MAX_UNIFORM_LOCATIONS = 0x826E
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD
GL_IS_PER_PATCH = 0x92E7
GL_IMAGE_CLASS_4_X_16 = 0x82BC
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39
GL_COMPUTE_SHADER_BIT = 0x00000020
GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC
GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D
GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275
GL_TESS_EVALUATION_TEXTURE = 0x829D
GL_COMPUTE_TEXTURE = 0x82A0
GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E
GL_DEBUG_TYPE_ERROR = 0x824C
GL_TEXTURE_BUFFER_OFFSET = 0x919D
GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8
GL_VERTEX_ARRAY = 0x8074
GL_DISPATCH_INDIRECT_BUFFER = 0x90EE
GL_BUFFER_BINDING = 0x9302
GL_VIEW_CLASS_RGTC1_RED = 0x82D0
GL_TEXTURE_IMAGE_FORMAT = 0x828F
GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA
GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5
GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3
GL_BUFFER = 0x82E0
GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143
GL_IMAGE_CLASS_10_10_10_2 = 0x82C3
GL_VIEW_CLASS_24_BITS = 0x82C9
GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF
GL_VIEW_CLASS_96_BITS = 0x82C5
GL_INTERNALFORMAT_BLUE_TYPE = 0x827A
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
GL_COMPUTE_WORK_GROUP_SIZE = 0x8267
GL_MAX_ELEMENT_INDEX = 0x8D6B
GL_DEBUG_GROUP_STACK_DEPTH = 0x826D
GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3
GL_SHADER = 0x82E1
GL_ACTIVE_VARIABLES = 0x9305
GL_DEBUG_TYPE_POP_GROUP = 0x826A
GL_DEBUG_SEVERITY_HIGH = 0x9146
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
GL_TESS_EVALUATION_SUBROUTINE = 0x92EA
GL_MAX_COMBINED_DIMENSIONS = 0x8282
GL_INTERNALFORMAT_RED_SIZE = 0x8271
GL_MAX_FRAMEBUFFER_WIDTH = 0x9315
GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144
GL_INTERNALFORMAT_PREFERRED = 0x8270
GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF
GL_TESS_CONTROL_SUBROUTINE = 0x92E9
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
GL_CAVEAT_SUPPORT = 0x82B8
GL_INTERNALFORMAT_SUPPORTED = 0x826F
GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5
GL_VERTEX_TEXTURE = 0x829B
GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307
GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249
GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309
GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2
GL_MAX_HEIGHT = 0x827F
GL_SHADER_STORAGE_BUFFER = 0x90D2
GL_IMAGE_CLASS_1_X_32 = 0x82BB
GL_REFERENCED_BY_VERTEX_SHADER = 0x9306
GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF
GL_TEXTURE_GATHER = 0x82A2
GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276
GL_LOCATION_INDEX = 0x930F
GL_COLOR_COMPONENTS = 0x8283
GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273
GL_COMPUTE_SUBROUTINE = 0x92ED
GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69
GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B
GL_TEXTURE_VIEW = 0x82B5
GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC
GL_MAX_FRAMEBUFFER_LAYERS = 0x9317
GL_FRAGMENT_TEXTURE = 0x829F
GL_VERTEX_BINDING_BUFFER = 0x8F4F
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB
GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB
GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002
GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278
GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248
GL_COMPRESSED_RGB8_ETC2 = 0x9274
GL_DEBUG_CALLBACK_USER_PARAM = 0x8245
GL_VIEW_CLASS_16_BITS = 0x82CA
GL_SRGB_WRITE = 0x8298
GL_DEBUG_TYPE_PUSH_GROUP = 0x8269
GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310
GL_NAME_LENGTH = 0x92F9
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC
GL_TOP_LEVEL_ARRAY_SIZE = 0x930C
GL_IMAGE_CLASS_1_X_16 = 0x82BE
GL_QUERY = 0x82E3
GL_GEOMETRY_TEXTURE = 0x829E
GL_DEBUG_SOURCE_API = 0x8246
GL_SHADER_IMAGE_LOAD = 0x82A4
GL_MAX_LAYERS = 0x8281
GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA
GL_IMAGE_PIXEL_FORMAT = 0x82A9
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2
GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE
GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316
GL_COMPRESSED_SRGB8_ETC2 = 0x9275
GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3
GL_VIEW_CLASS_128_BITS = 0x82C4
GL_FILTER = 0x829A
GL_MAX_NAME_LENGTH = 0x92F6
GL_IMAGE_CLASS_11_11_10 = 0x82C2
GL_DEBUG_TYPE_OTHER = 0x8251
GL_VIEW_CLASS_8_BITS = 0x82CB
GL_VIEW_COMPATIBILITY_CLASS = 0x82B6
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7
GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C

def init_gl_version_4_3():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glDispatchComputeIndirect = gl_func( 'glDispatchComputeIndirect', t.void, (t.GLintptr,))
    gl.glVertexBindingDivisor = gl_func( 'glVertexBindingDivisor', t.void, (t.GLuint, t.GLuint))
    gl.glInvalidateSubFramebuffer = gl_func( 'glInvalidateSubFramebuffer', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLenum), t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glObjectLabel = gl_func( 'glObjectLabel', t.void, (t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLchar)))
    gl.glVertexAttribFormat = gl_func( 'glVertexAttribFormat', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLboolean, t.GLuint))
    gl.glGetFramebufferParameteriv = gl_func( 'glGetFramebufferParameteriv', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glInvalidateFramebuffer = gl_func( 'glInvalidateFramebuffer', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLenum)))
    gl.glPopDebugGroup = gl_func( 'glPopDebugGroup', t.void, ())
    gl.glBindVertexBuffer = gl_func( 'glBindVertexBuffer', t.void, (t.GLuint, t.GLuint, t.GLintptr, t.GLsizei))
    gl.glDebugMessageControl = gl_func( 'glDebugMessageControl', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.GLuint), t.GLboolean))
    gl.glInvalidateTexImage = gl_func( 'glInvalidateTexImage', t.void, (t.GLuint, t.GLint))
    gl.glPushDebugGroup = gl_func( 'glPushDebugGroup', t.void, (t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLchar)))
    gl.glGetDebugMessageLog = gl_func( 'glGetDebugMessageLog', t.GLuint, (t.GLuint, t.GLsizei, ct.POINTER(t.GLenum), ct.POINTER(t.GLenum), ct.POINTER(t.GLuint), ct.POINTER(t.GLenum), ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glGetProgramInterfaceiv = gl_func( 'glGetProgramInterfaceiv', t.void, (t.GLuint, t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glObjectPtrLabel = gl_func( 'glObjectPtrLabel', t.void, (ct.POINTER(t.void), t.GLsizei, ct.POINTER(t.GLchar)))
    gl.glFramebufferParameteri = gl_func( 'glFramebufferParameteri', t.void, (t.GLenum, t.GLenum, t.GLint))
    gl.glClearBufferData = gl_func( 'glClearBufferData', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glTexStorage3DMultisample = gl_func( 'glTexStorage3DMultisample', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glDispatchCompute = gl_func( 'glDispatchCompute', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glMultiDrawElementsIndirect = gl_func( 'glMultiDrawElementsIndirect', t.void, (t.GLenum, t.GLenum, ct.POINTER(t.void), t.GLsizei, t.GLsizei))
    gl.glTexBufferRange = gl_func( 'glTexBufferRange', t.void, (t.GLenum, t.GLenum, t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glGetObjectLabel = gl_func( 'glGetObjectLabel', t.void, (t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glGetProgramResourceIndex = gl_func( 'glGetProgramResourceIndex', t.GLuint, (t.GLuint, t.GLenum, ct.POINTER(t.GLchar)))
    gl.glGetProgramResourceLocationIndex = gl_func( 'glGetProgramResourceLocationIndex', t.GLint, (t.GLuint, t.GLenum, ct.POINTER(t.GLchar)))
    gl.glGetProgramResourceName = gl_func( 'glGetProgramResourceName', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glGetPointerv = gl_func( 'glGetPointerv', t.void, (t.GLenum, t.void))
    gl.glVertexAttribIFormat = gl_func( 'glVertexAttribIFormat', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLuint))
    gl.glInvalidateTexSubImage = gl_func( 'glInvalidateTexSubImage', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei))
#     gl.glDebugMessageCallback = gl_func( 'glDebugMessageCallback', t.void, (t.GLDEBUGPROC, ct.POINTER(t.void)))
    gl.glShaderStorageBlockBinding = gl_func( 'glShaderStorageBlockBinding', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glInvalidateBufferSubData = gl_func( 'glInvalidateBufferSubData', t.void, (t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glVertexAttribLFormat = gl_func( 'glVertexAttribLFormat', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLuint))
    gl.glCopyImageSubData = gl_func( 'glCopyImageSubData', t.void, (t.GLuint, t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLuint, t.GLenum, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei))
    gl.glGetObjectPtrLabel = gl_func( 'glGetObjectPtrLabel', t.void, (ct.POINTER(t.void), t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLchar)))
    gl.glClearBufferSubData = gl_func( 'glClearBufferSubData', t.void, (t.GLenum, t.GLenum, t.GLintptr, t.GLsizeiptr, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glInvalidateBufferData = gl_func( 'glInvalidateBufferData', t.void, (t.GLuint,))
    gl.glGetProgramResourceLocation = gl_func( 'glGetProgramResourceLocation', t.GLint, (t.GLuint, t.GLenum, ct.POINTER(t.GLchar)))
    gl.glTextureView = gl_func( 'glTextureView', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLenum, t.GLuint, t.GLuint, t.GLuint, t.GLuint))
    gl.glGetInternalformati64v = gl_func( 'glGetInternalformati64v', t.void, (t.GLenum, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.GLint64)))
    gl.glDebugMessageInsert = gl_func( 'glDebugMessageInsert', t.void, (t.GLenum, t.GLenum, t.GLuint, t.GLenum, t.GLsizei, ct.POINTER(t.GLchar)))
    gl.glTexStorage2DMultisample = gl_func( 'glTexStorage2DMultisample', t.void, (t.GLenum, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glGetProgramResourceiv = gl_func( 'glGetProgramResourceiv', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLenum), t.GLsizei, ct.POINTER(t.GLsizei), ct.POINTER(t.GLint)))
    gl.glMultiDrawArraysIndirect = gl_func( 'glMultiDrawArraysIndirect', t.void, (t.GLenum, ct.POINTER(t.void), t.GLsizei, t.GLsizei))
    gl.glVertexAttribBinding = gl_func( 'glVertexAttribBinding', t.void, (t.GLuint, t.GLuint))

#### GL VERSION 4.4 ####
GL_STENCIL_INDEX = 0x1901
GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C
GL_TEXTURE_BUFFER_BINDING = 0x8C2A
GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000
GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E
GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5
GL_STENCIL_INDEX8 = 0x8D48
GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221
GL_MAP_COHERENT_BIT = 0x0080
GL_MIRROR_CLAMP_TO_EDGE = 0x8743
GL_MAP_WRITE_BIT = 0x0002
GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000
GL_MAP_PERSISTENT_BIT = 0x0040
GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B
GL_BUFFER_IMMUTABLE_STORAGE = 0x821F
GL_CLIENT_STORAGE_BIT = 0x0200
GL_DYNAMIC_STORAGE_BIT = 0x0100
GL_QUERY_BUFFER_BINDING = 0x9193
GL_BUFFER_STORAGE_FLAGS = 0x8220
GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B
GL_QUERY_RESULT_NO_WAIT = 0x9194
GL_LOCATION_COMPONENT = 0x934A
GL_QUERY_BUFFER = 0x9192
GL_MAP_READ_BIT = 0x0001
GL_CLEAR_TEXTURE = 0x9365

def init_gl_version_4_4():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glClearTexSubImage = gl_func( 'glClearTexSubImage', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glBindVertexBuffers = gl_func( 'glBindVertexBuffers', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLuint), ct.POINTER(t.GLintptr), ct.POINTER(t.GLsizei)))
    gl.glBindSamplers = gl_func( 'glBindSamplers', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBindImageTextures = gl_func( 'glBindImageTextures', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBufferStorage = gl_func( 'glBufferStorage', t.void, (t.GLenum, t.GLsizeiptr, ct.POINTER(t.void), t.GLbitfield))
    gl.glBindBuffersBase = gl_func( 'glBindBuffersBase', t.void, (t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glClearTexImage = gl_func( 'glClearTexImage', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glBindTextures = gl_func( 'glBindTextures', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glBindBuffersRange = gl_func( 'glBindBuffersRange', t.void, (t.GLenum, t.GLuint, t.GLsizei, ct.POINTER(t.GLuint), ct.POINTER(t.GLintptr), ct.POINTER(t.GLsizeiptr)))

#### GL VERSION 4.5 ####
GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB
GL_ZERO_TO_ONE = 0x935F
GL_TEXTURE_BINDING_CUBE_MAP = 0x8514
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105
GL_BACK = 0x0405
GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A
GL_TEXTURE_BINDING_BUFFER = 0x8C2C
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A
GL_QUERY_NO_WAIT_INVERTED = 0x8E18
GL_NEGATIVE_ONE_TO_ONE = 0x935E
GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC
GL_TEXTURE_BINDING_1D = 0x8068
GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D
GL_LOSE_CONTEXT_ON_RESET = 0x8252
GL_GUILTY_CONTEXT_RESET = 0x8253
GL_NO_RESET_NOTIFICATION = 0x8261
GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA
GL_NO_ERROR = 0
GL_UNKNOWN_CONTEXT_RESET = 0x8255
GL_TEXTURE_TARGET = 0x1006
GL_INNOCENT_CONTEXT_RESET = 0x8254
GL_CLIP_DEPTH_MODE = 0x935D
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004
GL_CLIP_ORIGIN = 0x935C
GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19
GL_NONE = 0
GL_QUERY_TARGET = 0x82EA
GL_LOWER_LEFT = 0x8CA1
GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C
GL_UPPER_LEFT = 0x8CA2
GL_QUERY_WAIT_INVERTED = 0x8E17
GL_TEXTURE_BINDING_2D = 0x8069
GL_MAX_CULL_DISTANCES = 0x82F9
GL_TEXTURE_BINDING_RECTANGLE = 0x84F6
GL_CONTEXT_LOST = 0x0507
GL_RESET_NOTIFICATION_STRATEGY = 0x8256
GL_TEXTURE_BINDING_3D = 0x806A
GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104

def init_gl_version_4_5():
    gl = sys.modules['opengl.gl']

    noParms = ()
    gl.glGetVertexArrayiv = gl_func( 'glGetVertexArrayiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetTextureParameterIiv = gl_func( 'glGetTextureParameterIiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetnUniformdv = gl_func( 'glGetnUniformdv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLdouble)))
    gl.glGetQueryBufferObjecti64v = gl_func( 'glGetQueryBufferObjecti64v', t.void, (t.GLuint, t.GLuint, t.GLenum, t.GLintptr))
    gl.glClearNamedFramebufferfi = gl_func( 'glClearNamedFramebufferfi', t.void, (t.GLuint, t.GLenum, t.GLfloat, t.GLint))
    gl.glCreateSamplers = gl_func( 'glCreateSamplers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glVertexArrayAttribFormat = gl_func( 'glVertexArrayAttribFormat', t.void, (t.GLuint, t.GLuint, t.GLint, t.GLenum, t.GLboolean, t.GLuint))
    gl.glVertexArrayVertexBuffers = gl_func( 'glVertexArrayVertexBuffers', t.void, (t.GLuint, t.GLuint, t.GLsizei, ct.POINTER(t.GLuint), ct.POINTER(t.GLintptr), ct.POINTER(t.GLsizei)))
    gl.glCreateFramebuffers = gl_func( 'glCreateFramebuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glNamedRenderbufferStorageMultisample = gl_func( 'glNamedRenderbufferStorageMultisample', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei))
    gl.glBlitNamedFramebuffer = gl_func( 'glBlitNamedFramebuffer', t.void, (t.GLuint, t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLbitfield, t.GLenum))
    gl.glDisableVertexArrayAttrib = gl_func( 'glDisableVertexArrayAttrib', t.void, (t.GLuint, t.GLuint))
    gl.glGetNamedFramebufferParameteriv = gl_func( 'glGetNamedFramebufferParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetTransformFeedbacki64_v = gl_func( 'glGetTransformFeedbacki64_v', t.void, (t.GLuint, t.GLenum, t.GLuint, ct.POINTER(t.GLint64)))
    gl.glNamedFramebufferReadBuffer = gl_func( 'glNamedFramebufferReadBuffer', t.void, (t.GLuint, t.GLenum))
    gl.glBindTextureUnit = gl_func( 'glBindTextureUnit', t.void, (t.GLuint, t.GLuint))
    gl.glGetTransformFeedbacki_v = gl_func( 'glGetTransformFeedbacki_v', t.void, (t.GLuint, t.GLenum, t.GLuint, ct.POINTER(t.GLint)))
    gl.glCheckNamedFramebufferStatus = gl_func( 'glCheckNamedFramebufferStatus', t.GLenum, (t.GLuint, t.GLenum))
    gl.glGetQueryBufferObjectui64v = gl_func( 'glGetQueryBufferObjectui64v', t.void, (t.GLuint, t.GLuint, t.GLenum, t.GLintptr))
    gl.glTextureBarrier = gl_func( 'glTextureBarrier', t.void, ())
    gl.glCopyTextureSubImage2D = gl_func( 'glCopyTextureSubImage2D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glTextureBuffer = gl_func( 'glTextureBuffer', t.void, (t.GLuint, t.GLenum, t.GLuint))
    gl.glGetTextureLevelParameterfv = gl_func( 'glGetTextureLevelParameterfv', t.void, (t.GLuint, t.GLint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glTextureStorage1D = gl_func( 'glTextureStorage1D', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei))
    gl.glNamedFramebufferTexture = gl_func( 'glNamedFramebufferTexture', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLint))
    gl.glGetNamedBufferParameteriv = gl_func( 'glGetNamedBufferParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glTextureSubImage2D = gl_func( 'glTextureSubImage2D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetCompressedTextureSubImage = gl_func( 'glGetCompressedTextureSubImage', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLsizei, ct.POINTER(t.void)))
    gl.glTextureSubImage3D = gl_func( 'glTextureSubImage3D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glInvalidateNamedFramebufferData = gl_func( 'glInvalidateNamedFramebufferData', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLenum)))
    gl.glVertexArrayBindingDivisor = gl_func( 'glVertexArrayBindingDivisor', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glClearNamedFramebufferiv = gl_func( 'glClearNamedFramebufferiv', t.void, (t.GLuint, t.GLenum, t.GLint, ct.POINTER(t.GLint)))
    gl.glCompressedTextureSubImage3D = gl_func( 'glCompressedTextureSubImage3D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glGetTextureParameterIuiv = gl_func( 'glGetTextureParameterIuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glGetQueryBufferObjectuiv = gl_func( 'glGetQueryBufferObjectuiv', t.void, (t.GLuint, t.GLuint, t.GLenum, t.GLintptr))
    gl.glVertexArrayAttribBinding = gl_func( 'glVertexArrayAttribBinding', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glTextureStorage3D = gl_func( 'glTextureStorage3D', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei))
    gl.glCreateTextures = gl_func( 'glCreateTextures', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGetTextureLevelParameteriv = gl_func( 'glGetTextureLevelParameteriv', t.void, (t.GLuint, t.GLint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glMemoryBarrierByRegion = gl_func( 'glMemoryBarrierByRegion', t.void, (t.GLbitfield,))
    gl.glClearNamedBufferSubData = gl_func( 'glClearNamedBufferSubData', t.void, (t.GLuint, t.GLenum, t.GLintptr, t.GLsizeiptr, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGenerateTextureMipmap = gl_func( 'glGenerateTextureMipmap', t.void, (t.GLuint,))
    gl.glGetNamedRenderbufferParameteriv = gl_func( 'glGetNamedRenderbufferParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glNamedRenderbufferStorage = gl_func( 'glNamedRenderbufferStorage', t.void, (t.GLuint, t.GLenum, t.GLsizei, t.GLsizei))
    gl.glClearNamedBufferData = gl_func( 'glClearNamedBufferData', t.void, (t.GLuint, t.GLenum, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetNamedFramebufferAttachmentParameteriv = gl_func( 'glGetNamedFramebufferAttachmentParameteriv', t.void, (t.GLuint, t.GLenum, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetnUniformuiv = gl_func( 'glGetnUniformuiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glNamedFramebufferDrawBuffers = gl_func( 'glNamedFramebufferDrawBuffers', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLenum)))
    gl.glTextureParameterIuiv = gl_func( 'glTextureParameterIuiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLuint)))
    gl.glNamedBufferSubData = gl_func( 'glNamedBufferSubData', t.void, (t.GLuint, t.GLintptr, t.GLsizeiptr, ct.POINTER(t.void)))
    gl.glGetQueryBufferObjectiv = gl_func( 'glGetQueryBufferObjectiv', t.void, (t.GLuint, t.GLuint, t.GLenum, t.GLintptr))
    gl.glGetnTexImage = gl_func( 'glGetnTexImage', t.void, (t.GLenum, t.GLint, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glGetVertexArrayIndexed64iv = gl_func( 'glGetVertexArrayIndexed64iv', t.void, (t.GLuint, t.GLuint, t.GLenum, ct.POINTER(t.GLint64)))
    gl.glCopyTextureSubImage3D = gl_func( 'glCopyTextureSubImage3D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glNamedBufferData = gl_func( 'glNamedBufferData', t.void, (t.GLuint, t.GLsizeiptr, ct.POINTER(t.void), t.GLenum))
    gl.glNamedBufferStorage = gl_func( 'glNamedBufferStorage', t.void, (t.GLuint, t.GLsizeiptr, ct.POINTER(t.void), t.GLbitfield))
    gl.glGetTextureParameteriv = gl_func( 'glGetTextureParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glNamedFramebufferParameteri = gl_func( 'glNamedFramebufferParameteri', t.void, (t.GLuint, t.GLenum, t.GLint))
    gl.glGetGraphicsResetStatus = gl_func( 'glGetGraphicsResetStatus', t.GLenum, ())
    gl.glTextureStorage2D = gl_func( 'glTextureStorage2D', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei))
    gl.glGetnCompressedTexImage = gl_func( 'glGetnCompressedTexImage', t.void, (t.GLenum, t.GLint, t.GLsizei, ct.POINTER(t.void)))
    gl.glFlushMappedNamedBufferRange = gl_func( 'glFlushMappedNamedBufferRange', t.void, (t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glGetNamedBufferSubData = gl_func( 'glGetNamedBufferSubData', t.void, (t.GLuint, t.GLintptr, t.GLsizeiptr, ct.POINTER(t.void)))
    gl.glUnmapNamedBuffer = gl_func( 'glUnmapNamedBuffer', t.GLboolean, (t.GLuint,))
    gl.glTextureStorage3DMultisample = gl_func( 'glTextureStorage3DMultisample', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glCopyNamedBufferSubData = gl_func( 'glCopyNamedBufferSubData', t.void, (t.GLuint, t.GLuint, t.GLintptr, t.GLintptr, t.GLsizeiptr))
    gl.glCreateVertexArrays = gl_func( 'glCreateVertexArrays', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glTransformFeedbackBufferRange = gl_func( 'glTransformFeedbackBufferRange', t.void, (t.GLuint, t.GLuint, t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glCompressedTextureSubImage2D = gl_func( 'glCompressedTextureSubImage2D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glGetNamedBufferPointerv = gl_func( 'glGetNamedBufferPointerv', t.void, (t.GLuint, t.GLenum, ct.POINTER(ct.POINTER(t.void))))
    gl.glGetnUniformiv = gl_func( 'glGetnUniformiv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLint)))
    gl.glNamedFramebufferRenderbuffer = gl_func( 'glNamedFramebufferRenderbuffer', t.void, (t.GLuint, t.GLenum, t.GLenum, t.GLuint))
    gl.glMapNamedBufferRange = gl_func( 'glMapNamedBufferRange', ct.POINTER(t.void), (t.GLuint, t.GLintptr, t.GLsizeiptr, t.GLbitfield))
    gl.glTextureSubImage1D = gl_func( 'glTextureSubImage1D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLsizei, t.GLenum, t.GLenum, ct.POINTER(t.void)))
    gl.glGetNamedBufferParameteri64v = gl_func( 'glGetNamedBufferParameteri64v', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint64)))
    gl.glVertexArrayVertexBuffer = gl_func( 'glVertexArrayVertexBuffer', t.void, (t.GLuint, t.GLuint, t.GLuint, t.GLintptr, t.GLsizei))
    gl.glEnableVertexArrayAttrib = gl_func( 'glEnableVertexArrayAttrib', t.void, (t.GLuint, t.GLuint))
    gl.glGetCompressedTextureImage = gl_func( 'glGetCompressedTextureImage', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.void)))
    gl.glTextureParameterIiv = gl_func( 'glTextureParameterIiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glGetTransformFeedbackiv = gl_func( 'glGetTransformFeedbackiv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glTextureBufferRange = gl_func( 'glTextureBufferRange', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLintptr, t.GLsizeiptr))
    gl.glTextureParameteriv = gl_func( 'glTextureParameteriv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glClearNamedFramebufferfv = gl_func( 'glClearNamedFramebufferfv', t.void, (t.GLuint, t.GLenum, t.GLint, ct.POINTER(t.GLfloat)))
    gl.glInvalidateNamedFramebufferSubData = gl_func( 'glInvalidateNamedFramebufferSubData', t.void, (t.GLuint, t.GLsizei, ct.POINTER(t.GLenum), t.GLint, t.GLint, t.GLsizei, t.GLsizei))
    gl.glVertexArrayAttribLFormat = gl_func( 'glVertexArrayAttribLFormat', t.void, (t.GLuint, t.GLuint, t.GLint, t.GLenum, t.GLuint))
    gl.glGetVertexArrayIndexediv = gl_func( 'glGetVertexArrayIndexediv', t.void, (t.GLuint, t.GLuint, t.GLenum, ct.POINTER(t.GLint)))
    gl.glReadnPixels = gl_func( 'glReadnPixels', t.void, (t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glTransformFeedbackBufferBase = gl_func( 'glTransformFeedbackBufferBase', t.void, (t.GLuint, t.GLuint, t.GLuint))
    gl.glTextureStorage2DMultisample = gl_func( 'glTextureStorage2DMultisample', t.void, (t.GLuint, t.GLsizei, t.GLenum, t.GLsizei, t.GLsizei, t.GLboolean))
    gl.glMapNamedBuffer = gl_func( 'glMapNamedBuffer', ct.POINTER(t.void), (t.GLuint, t.GLenum))
    gl.glClearNamedFramebufferuiv = gl_func( 'glClearNamedFramebufferuiv', t.void, (t.GLuint, t.GLenum, t.GLint, ct.POINTER(t.GLuint)))
    gl.glGetTextureParameterfv = gl_func( 'glGetTextureParameterfv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glTextureParameteri = gl_func( 'glTextureParameteri', t.void, (t.GLuint, t.GLenum, t.GLint))
    gl.glGetTextureSubImage = gl_func( 'glGetTextureSubImage', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei, t.GLsizei, t.GLsizei, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glNamedFramebufferDrawBuffer = gl_func( 'glNamedFramebufferDrawBuffer', t.void, (t.GLuint, t.GLenum))
    gl.glCreateQueries = gl_func( 'glCreateQueries', t.void, (t.GLenum, t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glCopyTextureSubImage1D = gl_func( 'glCopyTextureSubImage1D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLint, t.GLint, t.GLsizei))
    gl.glTextureParameterfv = gl_func( 'glTextureParameterfv', t.void, (t.GLuint, t.GLenum, ct.POINTER(t.GLfloat)))
    gl.glClipControl = gl_func( 'glClipControl', t.void, (t.GLenum, t.GLenum))
    gl.glCreateRenderbuffers = gl_func( 'glCreateRenderbuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glCompressedTextureSubImage1D = gl_func( 'glCompressedTextureSubImage1D', t.void, (t.GLuint, t.GLint, t.GLint, t.GLsizei, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glGetTextureImage = gl_func( 'glGetTextureImage', t.void, (t.GLuint, t.GLint, t.GLenum, t.GLenum, t.GLsizei, ct.POINTER(t.void)))
    gl.glVertexArrayElementBuffer = gl_func( 'glVertexArrayElementBuffer', t.void, (t.GLuint, t.GLuint))
    gl.glCreateProgramPipelines = gl_func( 'glCreateProgramPipelines', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glNamedFramebufferTextureLayer = gl_func( 'glNamedFramebufferTextureLayer', t.void, (t.GLuint, t.GLenum, t.GLuint, t.GLint, t.GLint))
    gl.glVertexArrayAttribIFormat = gl_func( 'glVertexArrayAttribIFormat', t.void, (t.GLuint, t.GLuint, t.GLint, t.GLenum, t.GLuint))
    gl.glTextureParameterf = gl_func( 'glTextureParameterf', t.void, (t.GLuint, t.GLenum, t.GLfloat))
    gl.glCreateTransformFeedbacks = gl_func( 'glCreateTransformFeedbacks', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glCreateBuffers = gl_func( 'glCreateBuffers', t.void, (t.GLsizei, ct.POINTER(t.GLuint)))
    gl.glGetnUniformfv = gl_func( 'glGetnUniformfv', t.void, (t.GLuint, t.GLint, t.GLsizei, ct.POINTER(t.GLfloat)))


def init():
    init_gl_version_1_0()
    init_gl_version_1_1()
    init_gl_version_1_2()
    init_gl_version_1_3()
    init_gl_version_1_4()
    init_gl_version_1_5()
    init_gl_version_2_0()
    init_gl_version_2_1()
    init_gl_version_3_0()
    init_gl_version_3_1()
    init_gl_version_3_2()
    init_gl_version_3_3()
    init_gl_version_4_0()
    init_gl_version_4_1()
    init_gl_version_4_2()
    init_gl_version_4_3()
    init_gl_version_4_4()
    init_gl_version_4_5()

